
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006930  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  08006ac0  08006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800735c  0800735c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  0800735c  0800735c  0000835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007364  08007364  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007364  08007364  00008364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800736c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          000042f0  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004358  20004358  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fd4  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f62  00000000  00000000  0001a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  0001cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003eb2  00000000  00000000  0001de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011630  00000000  00000000  00021cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cda32  00000000  00000000  00033322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100d54  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000ae4  00000000  00000000  00100d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e58  00000000  00000000  0010187c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  001056d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aa8 	.word	0x08006aa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006aa8 	.word	0x08006aa8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	460c      	mov	r4, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d14e      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	458c      	cmp	ip, r1
 8000a4c:	4686      	mov	lr, r0
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	d962      	bls.n	8000b1a <__udivmoddi4+0xde>
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	4319      	orrs	r1, r3
 8000a66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb04 f106 	mul.w	r1, r4, r6
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a92:	f080 8112 	bcs.w	8000cba <__udivmoddi4+0x27e>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 810f 	bls.w	8000cba <__udivmoddi4+0x27e>
 8000a9c:	3c02      	subs	r4, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a59      	subs	r1, r3, r1
 8000aa2:	fa1f f38e 	uxth.w	r3, lr
 8000aa6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f606 	mul.w	r6, r0, r6
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x94>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac2:	f080 80fc 	bcs.w	8000cbe <__udivmoddi4+0x282>
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	f240 80f9 	bls.w	8000cbe <__udivmoddi4+0x282>
 8000acc:	4463      	add	r3, ip
 8000ace:	3802      	subs	r0, #2
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	b11d      	cbz	r5, 8000ae2 <__udivmoddi4+0xa6>
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2200      	movs	r2, #0
 8000ade:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d905      	bls.n	8000af6 <__udivmoddi4+0xba>
 8000aea:	b10d      	cbz	r5, 8000af0 <__udivmoddi4+0xb4>
 8000aec:	e9c5 0100 	strd	r0, r1, [r5]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
 8000af4:	e7f5      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000af6:	fab3 f183 	clz	r1, r3
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d146      	bne.n	8000b8c <__udivmoddi4+0x150>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xcc>
 8000b02:	4290      	cmp	r0, r2
 8000b04:	f0c0 80f0 	bcc.w	8000ce8 <__udivmoddi4+0x2ac>
 8000b08:	1a86      	subs	r6, r0, r2
 8000b0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__udivmoddi4+0xa6>
 8000b14:	e9c5 6300 	strd	r6, r3, [r5]
 8000b18:	e7e3      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8090 	bne.w	8000c40 <__udivmoddi4+0x204>
 8000b20:	eba1 040c 	sub.w	r4, r1, ip
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb07 f006 	mul.w	r0, r7, r6
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x11c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x11a>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b56:	4626      	mov	r6, r4
 8000b58:	1a1c      	subs	r4, r3, r0
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b62:	fb08 4410 	mls	r4, r8, r0, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb00 f707 	mul.w	r7, r0, r7
 8000b6e:	429f      	cmp	r7, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x148>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x146>
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	f200 80b0 	bhi.w	8000ce2 <__udivmoddi4+0x2a6>
 8000b82:	4620      	mov	r0, r4
 8000b84:	1bdb      	subs	r3, r3, r7
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0x9c>
 8000b8c:	f1c1 0620 	rsb	r6, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 f706 	lsr.w	r7, r2, r6
 8000b96:	431f      	orrs	r7, r3
 8000b98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba0:	ea43 030c 	orr.w	r3, r3, ip
 8000ba4:	40f4      	lsrs	r4, r6
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	0c38      	lsrs	r0, r7, #16
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc4:	45a1      	cmp	r9, r4
 8000bc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x1a6>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bd2:	f080 8084 	bcs.w	8000cde <__udivmoddi4+0x2a2>
 8000bd6:	45a1      	cmp	r9, r4
 8000bd8:	f240 8081 	bls.w	8000cde <__udivmoddi4+0x2a2>
 8000bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	eba4 0409 	sub.w	r4, r4, r9
 8000be6:	fa1f f983 	uxth.w	r9, r3
 8000bea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bee:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x1d2>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c04:	d267      	bcs.n	8000cd6 <__udivmoddi4+0x29a>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	d965      	bls.n	8000cd6 <__udivmoddi4+0x29a>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c12:	fba0 9302 	umull	r9, r3, r0, r2
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	46ce      	mov	lr, r9
 8000c1e:	469c      	mov	ip, r3
 8000c20:	d351      	bcc.n	8000cc6 <__udivmoddi4+0x28a>
 8000c22:	d04e      	beq.n	8000cc2 <__udivmoddi4+0x286>
 8000c24:	b155      	cbz	r5, 8000c3c <__udivmoddi4+0x200>
 8000c26:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	431e      	orrs	r6, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e750      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f103 	lsr.w	r1, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c50:	4094      	lsls	r4, r2
 8000c52:	430c      	orrs	r4, r1
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3110 	mls	r1, r8, r0, r3
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f107 	mul.w	r1, r0, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x24c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c7e:	d22c      	bcs.n	8000cda <__udivmoddi4+0x29e>
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d92a      	bls.n	8000cda <__udivmoddi4+0x29e>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c90:	fb08 3311 	mls	r3, r8, r1, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb01 f307 	mul.w	r3, r1, r7
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x276>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca8:	d213      	bcs.n	8000cd2 <__udivmoddi4+0x296>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d911      	bls.n	8000cd2 <__udivmoddi4+0x296>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	1ae4      	subs	r4, r4, r3
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e739      	b.n	8000b2e <__udivmoddi4+0xf2>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	e6f0      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e706      	b.n	8000ad0 <__udivmoddi4+0x94>
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d2ae      	bcs.n	8000c24 <__udivmoddi4+0x1e8>
 8000cc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7a8      	b.n	8000c24 <__udivmoddi4+0x1e8>
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__udivmoddi4+0x276>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e799      	b.n	8000c0e <__udivmoddi4+0x1d2>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e7d4      	b.n	8000c88 <__udivmoddi4+0x24c>
 8000cde:	46d6      	mov	lr, sl
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1a6>
 8000ce2:	4463      	add	r3, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e74d      	b.n	8000b84 <__udivmoddi4+0x148>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4623      	mov	r3, r4
 8000cec:	4608      	mov	r0, r1
 8000cee:	e70f      	b.n	8000b10 <__udivmoddi4+0xd4>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	e730      	b.n	8000b58 <__udivmoddi4+0x11c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <vApplicationGetIdleTaskMemory+0x30>)
 8000d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2280      	movs	r2, #128	@ 0x80
 8000d18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000084 	.word	0x20000084
 8000d2c:	20000124 	.word	0x20000124

08000d30 <write_to_backup_sram>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t write_to_backup_sram(uint16_t *data, uint16_t words, uint16_t offset) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	803b      	strh	r3, [r7, #0]
      const uint16_t backup_size = 0x1000;
 8000d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d44:	81bb      	strh	r3, [r7, #12]
      uint16_t* base_addr = (uint16_t *) BKPSRAM_BASE;
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <write_to_backup_sram+0xa4>)
 8000d48:	60bb      	str	r3, [r7, #8]
      uint16_t i;

      if (words + offset >= backup_size) {
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	441a      	add	r2, r3
 8000d50:	89bb      	ldrh	r3, [r7, #12]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	db02      	blt.n	8000d5c <write_to_backup_sram+0x2c>
          return -1; // ERROR: the last byte is outside the backup SRAM region
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e034      	b.n	8000dc6 <write_to_backup_sram+0x96>
      }

      ENABLE_BIT(RCC->AHB1ENR, RCC_AHB1ENR_BKPSRAMEN_Pos);
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <write_to_backup_sram+0xa8>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <write_to_backup_sram+0xa8>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d66:	6313      	str	r3, [r2, #48]	@ 0x30
	  ENABLE_BIT(RCC->AHB1ENR, RCC_APB1ENR_PWREN_Pos);
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <write_to_backup_sram+0xa8>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd8 <write_to_backup_sram+0xa8>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	6313      	str	r3, [r2, #48]	@ 0x30
	  ENABLE_BIT(PWR->CR, 8);
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <write_to_backup_sram+0xac>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a18      	ldr	r2, [pc, #96]	@ (8000ddc <write_to_backup_sram+0xac>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
	  ENABLE_BIT(PWR->CSR, 9);
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <write_to_backup_sram+0xac>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <write_to_backup_sram+0xac>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8a:	6053      	str	r3, [r2, #4]

      for (i = 0; i < words; i++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	81fb      	strh	r3, [r7, #14]
 8000d90:	e00e      	b.n	8000db0 <write_to_backup_sram+0x80>
          *(base_addr + offset + i) = *(data + i);
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	441a      	add	r2, r3
 8000d9a:	8839      	ldrh	r1, [r7, #0]
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	440b      	add	r3, r1
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	440b      	add	r3, r1
 8000da6:	8812      	ldrh	r2, [r2, #0]
 8000da8:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < words; i++) {
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	3301      	adds	r3, #1
 8000dae:	81fb      	strh	r3, [r7, #14]
 8000db0:	89fa      	ldrh	r2, [r7, #14]
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3ec      	bcc.n	8000d92 <write_to_backup_sram+0x62>
      }

      DISABLE_BIT(PWR->CR, 8);
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <write_to_backup_sram+0xac>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <write_to_backup_sram+0xac>)
 8000dbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
      return 0;
 8000dc4:	2300      	movs	r3, #0
  }
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40024000 	.word	0x40024000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <read_from_backup_sram>:

int8_t read_from_backup_sram(uint16_t *data, uint16_t words, uint16_t offset) {
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	803b      	strh	r3, [r7, #0]
      const uint16_t backup_size = 0x1000;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	81bb      	strh	r3, [r7, #12]
      uint16_t* base_addr = (uint16_t *) BKPSRAM_BASE;
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <read_from_backup_sram+0x98>)
 8000df8:	60bb      	str	r3, [r7, #8]
      uint16_t i;

      if (words + offset >= backup_size) {
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	883b      	ldrh	r3, [r7, #0]
 8000dfe:	441a      	add	r2, r3
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	db02      	blt.n	8000e0c <read_from_backup_sram+0x2c>
          return -1; // ERROR: the last byte is outside the backup SRAM region
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e02e      	b.n	8000e6a <read_from_backup_sram+0x8a>
      }

      ENABLE_BIT(RCC->AHB1ENR, RCC_APB1ENR_PWREN_Pos);
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <read_from_backup_sram+0x9c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <read_from_backup_sram+0x9c>)
 8000e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	6313      	str	r3, [r2, #48]	@ 0x30
      ENABLE_BIT(PWR->CR, 8);
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <read_from_backup_sram+0xa0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <read_from_backup_sram+0xa0>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e22:	6013      	str	r3, [r2, #0]
      ENABLE_BIT(RCC->AHB1ENR, RCC_AHB1ENR_BKPSRAMEN_Pos);
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <read_from_backup_sram+0x9c>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <read_from_backup_sram+0x9c>)
 8000e2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6313      	str	r3, [r2, #48]	@ 0x30

      for (i = 0; i < words; i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	81fb      	strh	r3, [r7, #14]
 8000e34:	e00e      	b.n	8000e54 <read_from_backup_sram+0x74>
          *(data + i) = *(base_addr + offset + i);
 8000e36:	883a      	ldrh	r2, [r7, #0]
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	441a      	add	r2, r3
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	440b      	add	r3, r1
 8000e4a:	8812      	ldrh	r2, [r2, #0]
 8000e4c:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < words; i++) {
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	3301      	adds	r3, #1
 8000e52:	81fb      	strh	r3, [r7, #14]
 8000e54:	89fa      	ldrh	r2, [r7, #14]
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3ec      	bcc.n	8000e36 <read_from_backup_sram+0x56>
      }
      DISABLE_BIT(PWR->CR, 8);
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <read_from_backup_sram+0xa0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <read_from_backup_sram+0xa0>)
 8000e62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e66:	6013      	str	r3, [r2, #0]
      return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40024000 	.word	0x40024000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b09e      	sub	sp, #120	@ 0x78
 8000e88:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f000 ff57 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f889 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e92:	f000 f9a1 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e96:	f000 f977 	bl	8001188 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e9a:	f000 f8ed 	bl	8001078 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e9e:	f000 f93d 	bl	800111c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000ea2:	f000 fbcd 	bl	8001640 <ST7789_Init>
  ST7789_SetRotation(2);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f000 fb42 	bl	8001530 <ST7789_SetRotation>
  ST7789_Fill_Color(WHITE);
 8000eac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000eb0:	f000 fc7e 	bl	80017b0 <ST7789_Fill_Color>
  ST7789_WriteString(10, 10, "hello word", Font_7x10, WHITE, BLUE);
 8000eb4:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <main+0xf8>)
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	9202      	str	r2, [sp, #8]
 8000eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f80 <main+0xfc>)
 8000ec8:	210a      	movs	r1, #10
 8000eca:	200a      	movs	r0, #10
 8000ecc:	f000 fd2c 	bl	8001928 <ST7789_WriteString>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of flashWriteSemaphore */
  osSemaphoreDef(flashWriteSemaphore);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	667b      	str	r3, [r7, #100]	@ 0x64
  flashWriteSemaphoreHandle = osSemaphoreCreate(osSemaphore(flashWriteSemaphore), 1);
 8000ed8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f993 	bl	800420a <osSemaphoreCreate>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <main+0x100>)
 8000ee8:	6013      	str	r3, [r2, #0]

  /* definition and creation of flashWriteCompletedSemaphore */
  osSemaphoreDef(flashWriteCompletedSemaphore);
 8000eea:	2300      	movs	r3, #0
 8000eec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  flashWriteCompletedSemaphoreHandle = osSemaphoreCreate(osSemaphore(flashWriteCompletedSemaphore), 1);
 8000ef2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 f986 	bl	800420a <osSemaphoreCreate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <main+0x104>)
 8000f02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, blinkLed, osPriorityNormal, 0, 128);
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <main+0x108>)
 8000f06:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000f18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 f913 	bl	800414a <osThreadCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <main+0x10c>)
 8000f28:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, readADC, osPriorityNormal, 0, 128);
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <main+0x110>)
 8000f2c:	f107 0420 	add.w	r4, r7, #32
 8000f30:	461d      	mov	r5, r3
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 f900 	bl	800414a <osThreadCreate>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <main+0x114>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, monitorButton, osPriorityNormal, 0, 128);
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <main+0x118>)
 8000f52:	1d3c      	adds	r4, r7, #4
 8000f54:	461d      	mov	r5, r3
 8000f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 f8ef 	bl	800414a <osThreadCreate>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <main+0x11c>)
 8000f70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f72:	f003 f8e3 	bl	800413c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <main+0xf2>
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	08006ac0 	.word	0x08006ac0
 8000f84:	20000490 	.word	0x20000490
 8000f88:	20000494 	.word	0x20000494
 8000f8c:	08006ad4 	.word	0x08006ad4
 8000f90:	20000484 	.word	0x20000484
 8000f94:	08006af8 	.word	0x08006af8
 8000f98:	20000488 	.word	0x20000488
 8000f9c:	08006b1c 	.word	0x08006b1c
 8000fa0:	2000048c 	.word	0x2000048c

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	@ 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fc90 	bl	80068d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <SystemClock_Config+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a21      	ldr	r2, [pc, #132]	@ (8001074 <SystemClock_Config+0xd0>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <SystemClock_Config+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001018:	23a8      	movs	r3, #168	@ 0xa8
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f002 f98f 	bl	800334c <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 f9f6 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001044:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2105      	movs	r1, #5
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fbf0 	bl	800383c <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001062:	f000 f9df 	bl	8001424 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3750      	adds	r7, #80	@ 0x50
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <MX_ADC1_Init+0x98>)
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <MX_ADC1_Init+0x9c>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_ADC1_Init+0x98>)
 8001092:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001096:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <MX_ADC1_Init+0xa0>)
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010da:	f000 fec5 	bl	8001e68 <HAL_ADC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 f99e 	bl	8001424 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_ADC1_Init+0x98>)
 80010fa:	f001 f81d 	bl	8002138 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001104:	f000 f98e 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000324 	.word	0x20000324
 8001114:	40012000 	.word	0x40012000
 8001118:	0f000001 	.word	0x0f000001

0800111c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <MX_SPI1_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_SPI1_Init+0x64>)
 800116e:	f002 fd11 	bl	8003b94 <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001178:	f000 f954 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200003cc 	.word	0x200003cc
 8001184:	40013000 	.word	0x40013000

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_DMA_Init+0x4c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <MX_DMA_Init+0x4c>)
 8001198:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <MX_DMA_Init+0x4c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2105      	movs	r1, #5
 80011ae:	2038      	movs	r0, #56	@ 0x38
 80011b0:	f001 fb3d 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b4:	2038      	movs	r0, #56	@ 0x38
 80011b6:	f001 fb56 	bl	8002866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	203b      	movs	r0, #59	@ 0x3b
 80011c0:	f001 fb35 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011c4:	203b      	movs	r0, #59	@ 0x3b
 80011c6:	f001 fb4e 	bl	8002866 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <MX_GPIO_Init+0xb4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a25      	ldr	r2, [pc, #148]	@ (800128c <MX_GPIO_Init+0xb4>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <MX_GPIO_Init+0xb4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <MX_GPIO_Init+0xb4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a1e      	ldr	r2, [pc, #120]	@ (800128c <MX_GPIO_Init+0xb4>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <MX_GPIO_Init+0xb4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_GPIO_Init+0xb4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a17      	ldr	r2, [pc, #92]	@ (800128c <MX_GPIO_Init+0xb4>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_GPIO_Init+0xb4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LCD_RST_Pin|LCD_BL_Pin
 8001242:	2200      	movs	r2, #0
 8001244:	f240 11c7 	movw	r1, #455	@ 0x1c7
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <MX_GPIO_Init+0xb8>)
 800124a:	f002 f84b 	bl	80032e4 <HAL_GPIO_WritePin>
                          |LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800124e:	2302      	movs	r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_GPIO_Init+0xbc>)
 8001262:	f001 fe8b 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LCD_RST_Pin LCD_BL_Pin
                           LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LCD_RST_Pin|LCD_BL_Pin
 8001266:	f240 13c7 	movw	r3, #455	@ 0x1c7
 800126a:	60fb      	str	r3, [r7, #12]
                          |LCD_CS_Pin|LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_GPIO_Init+0xb8>)
 8001280:	f001 fe7c 	bl	8002f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(flashWriteSemaphoreHandle);
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 f831 	bl	800430c <osSemaphoreRelease>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000490 	.word	0x20000490

080012b8 <blinkLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blinkLed */
void blinkLed(void const * argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80012c0:	2101      	movs	r1, #1
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <blinkLed+0x1c>)
 80012c4:	f002 f827 	bl	8003316 <HAL_GPIO_TogglePin>
    osDelay(2000);
 80012c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012cc:	f002 ff89 	bl	80041e2 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80012d0:	bf00      	nop
 80012d2:	e7f5      	b.n	80012c0 <blinkLed+0x8>
 80012d4:	40020400 	.word	0x40020400

080012d8 <readADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readADC */
void readADC(void const * argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readADC */
  /* Infinite loop */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, ADC_BUF_LEN);
 80012e0:	220a      	movs	r2, #10
 80012e2:	490f      	ldr	r1, [pc, #60]	@ (8001320 <readADC+0x48>)
 80012e4:	480f      	ldr	r0, [pc, #60]	@ (8001324 <readADC+0x4c>)
 80012e6:	f000 fe03 	bl	8001ef0 <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreWait(flashWriteSemaphoreHandle, osWaitForever);
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <readADC+0x50>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f04f 31ff 	mov.w	r1, #4294967295
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 ffbc 	bl	8004270 <osSemaphoreWait>
	  write_to_backup_sram(adc_value, ADC_BUF_LEN,0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	210a      	movs	r1, #10
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <readADC+0x48>)
 80012fe:	f7ff fd17 	bl	8000d30 <write_to_backup_sram>
	  osSemaphoreRelease(flashWriteSemaphoreHandle);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <readADC+0x50>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f003 f800 	bl	800430c <osSemaphoreRelease>
	  osSemaphoreRelease(flashWriteCompletedSemaphoreHandle);
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <readADC+0x54>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fffb 	bl	800430c <osSemaphoreRelease>
	  osDelay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f002 ff63 	bl	80041e2 <osDelay>
	  osSemaphoreWait(flashWriteSemaphoreHandle, osWaitForever);
 800131c:	bf00      	nop
 800131e:	e7e4      	b.n	80012ea <readADC+0x12>
 8001320:	20000498 	.word	0x20000498
 8001324:	20000324 	.word	0x20000324
 8001328:	20000490 	.word	0x20000490
 800132c:	20000494 	.word	0x20000494

08001330 <monitorButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_monitorButton */
void monitorButton(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN monitorButton */
  /* Infinite loop */
	float vol = 0.0;
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  osSemaphoreWait(flashWriteCompletedSemaphoreHandle, osWaitForever);
 800133e:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <monitorButton+0xe0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f04f 31ff 	mov.w	r1, #4294967295
 8001346:	4618      	mov	r0, r3
 8001348:	f002 ff92 	bl	8004270 <osSemaphoreWait>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 800134c:	2102      	movs	r1, #2
 800134e:	4831      	ldr	r0, [pc, #196]	@ (8001414 <monitorButton+0xe4>)
 8001350:	f001 ffb0 	bl	80032b4 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d152      	bne.n	8001400 <monitorButton+0xd0>
		  osDelay(100);
 800135a:	2064      	movs	r0, #100	@ 0x64
 800135c:	f002 ff41 	bl	80041e2 <osDelay>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8001360:	2102      	movs	r1, #2
 8001362:	482c      	ldr	r0, [pc, #176]	@ (8001414 <monitorButton+0xe4>)
 8001364:	f001 ffa6 	bl	80032b4 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d143      	bne.n	80013f6 <monitorButton+0xc6>
			  read_from_backup_sram(rx_data, ADC_BUF_LEN, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	210a      	movs	r1, #10
 8001372:	4829      	ldr	r0, [pc, #164]	@ (8001418 <monitorButton+0xe8>)
 8001374:	f7ff fd34 	bl	8000de0 <read_from_backup_sram>
			  vol = ((float)rx_data[0]/4096.0)*3.3;
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <monitorButton+0xe8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	ee17 0a90 	vmov	r0, s15
 8001388:	f7ff f886 	bl	8000498 <__aeabi_f2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <monitorButton+0xec>)
 8001392:	f7ff fa03 	bl	800079c <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001408 <monitorButton+0xd8>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f8d0 	bl	8000548 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fadc 	bl	800096c <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	60fb      	str	r3, [r7, #12]
			  if(vol > 1.0)
 80013b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd05      	ble.n	80013d6 <monitorButton+0xa6>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2102      	movs	r1, #2
 80013ce:	4814      	ldr	r0, [pc, #80]	@ (8001420 <monitorButton+0xf0>)
 80013d0:	f001 ff88 	bl	80032e4 <HAL_GPIO_WritePin>
 80013d4:	e008      	b.n	80013e8 <monitorButton+0xb8>
			  else
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2102      	movs	r1, #2
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <monitorButton+0xf0>)
 80013dc:	f001 ff82 	bl	80032e4 <HAL_GPIO_WritePin>
			  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80013e0:	e002      	b.n	80013e8 <monitorButton+0xb8>
				  osDelay(10);  // Small delay to avoid CPU overload
 80013e2:	200a      	movs	r0, #10
 80013e4:	f002 fefd 	bl	80041e2 <osDelay>
			  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80013e8:	2102      	movs	r1, #2
 80013ea:	480a      	ldr	r0, [pc, #40]	@ (8001414 <monitorButton+0xe4>)
 80013ec:	f001 ff62 	bl	80032b4 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f5      	beq.n	80013e2 <monitorButton+0xb2>
			  }
		  }
		  osSemaphoreRelease(flashWriteCompletedSemaphoreHandle);
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <monitorButton+0xe0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ff86 	bl	800430c <osSemaphoreRelease>
	  }
	  osDelay(1);
 8001400:	2001      	movs	r0, #1
 8001402:	f002 feee 	bl	80041e2 <osDelay>
	  osSemaphoreWait(flashWriteCompletedSemaphoreHandle, osWaitForever);
 8001406:	e79a      	b.n	800133e <monitorButton+0xe>
 8001408:	66666666 	.word	0x66666666
 800140c:	400a6666 	.word	0x400a6666
 8001410:	20000494 	.word	0x20000494
 8001414:	40020000 	.word	0x40020000
 8001418:	200004ac 	.word	0x200004ac
 800141c:	40b00000 	.word	0x40b00000
 8001420:	40020400 	.word	0x40020400

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800143a:	2200      	movs	r2, #0
 800143c:	2180      	movs	r1, #128	@ 0x80
 800143e:	480c      	ldr	r0, [pc, #48]	@ (8001470 <ST7789_WriteCommand+0x40>)
 8001440:	f001 ff50 	bl	80032e4 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144a:	4809      	ldr	r0, [pc, #36]	@ (8001470 <ST7789_WriteCommand+0x40>)
 800144c:	f001 ff4a 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001450:	1df9      	adds	r1, r7, #7
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2201      	movs	r2, #1
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <ST7789_WriteCommand+0x44>)
 800145a:	f002 fc24 	bl	8003ca6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800145e:	2201      	movs	r2, #1
 8001460:	2180      	movs	r1, #128	@ 0x80
 8001462:	4803      	ldr	r0, [pc, #12]	@ (8001470 <ST7789_WriteCommand+0x40>)
 8001464:	f001 ff3e 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40020400 	.word	0x40020400
 8001474:	200003cc 	.word	0x200003cc

08001478 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001482:	2200      	movs	r2, #0
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <ST7789_WriteData+0x68>)
 8001488:	f001 ff2c 	bl	80032e4 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001492:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <ST7789_WriteData+0x68>)
 8001494:	f001 ff26 	bl	80032e4 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001498:	e015      	b.n	80014c6 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a0:	4293      	cmp	r3, r2
 80014a2:	bf28      	it	cs
 80014a4:	4613      	movcs	r3, r2
 80014a6:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80014a8:	89fa      	ldrh	r2, [r7, #14]
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <ST7789_WriteData+0x6c>)
 80014b2:	f002 fbf8 	bl	8003ca6 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e6      	bne.n	800149a <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 80014cc:	2201      	movs	r2, #1
 80014ce:	2180      	movs	r1, #128	@ 0x80
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <ST7789_WriteData+0x68>)
 80014d2:	f001 ff07 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40020400 	.word	0x40020400
 80014e4:	200003cc 	.word	0x200003cc

080014e8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80014f2:	2200      	movs	r2, #0
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	480c      	ldr	r0, [pc, #48]	@ (8001528 <ST7789_WriteSmallData+0x40>)
 80014f8:	f001 fef4 	bl	80032e4 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001502:	4809      	ldr	r0, [pc, #36]	@ (8001528 <ST7789_WriteSmallData+0x40>)
 8001504:	f001 feee 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001508:	1df9      	adds	r1, r7, #7
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	2201      	movs	r2, #1
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <ST7789_WriteSmallData+0x44>)
 8001512:	f002 fbc8 	bl	8003ca6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001516:	2201      	movs	r2, #1
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	4803      	ldr	r0, [pc, #12]	@ (8001528 <ST7789_WriteSmallData+0x40>)
 800151c:	f001 fee2 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020400 	.word	0x40020400
 800152c:	200003cc 	.word	0x200003cc

08001530 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800153a:	2036      	movs	r0, #54	@ 0x36
 800153c:	f7ff ff78 	bl	8001430 <ST7789_WriteCommand>
	switch (m) {
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d81a      	bhi.n	800157c <ST7789_SetRotation+0x4c>
 8001546:	a201      	add	r2, pc, #4	@ (adr r2, 800154c <ST7789_SetRotation+0x1c>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	0800155d 	.word	0x0800155d
 8001550:	08001565 	.word	0x08001565
 8001554:	0800156d 	.word	0x0800156d
 8001558:	08001575 	.word	0x08001575
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800155c:	20c0      	movs	r0, #192	@ 0xc0
 800155e:	f7ff ffc3 	bl	80014e8 <ST7789_WriteSmallData>
		break;
 8001562:	e00c      	b.n	800157e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001564:	20a0      	movs	r0, #160	@ 0xa0
 8001566:	f7ff ffbf 	bl	80014e8 <ST7789_WriteSmallData>
		break;
 800156a:	e008      	b.n	800157e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ffbb 	bl	80014e8 <ST7789_WriteSmallData>
		break;
 8001572:	e004      	b.n	800157e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001574:	2060      	movs	r0, #96	@ 0x60
 8001576:	f7ff ffb7 	bl	80014e8 <ST7789_WriteSmallData>
		break;
 800157a:	e000      	b.n	800157e <ST7789_SetRotation+0x4e>
	default:
		break;
 800157c:	bf00      	nop
	}
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop

08001588 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	4604      	mov	r4, r0
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	4603      	mov	r3, r0
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	807b      	strh	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80015a6:	2200      	movs	r2, #0
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	4824      	ldr	r0, [pc, #144]	@ (800163c <ST7789_SetAddressWindow+0xb4>)
 80015ac:	f001 fe9a 	bl	80032e4 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	82fb      	strh	r3, [r7, #22]
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	827b      	strh	r3, [r7, #18]
 80015bc:	883b      	ldrh	r3, [r7, #0]
 80015be:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80015c0:	202a      	movs	r0, #42	@ 0x2a
 80015c2:	f7ff ff35 	bl	8001430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	733b      	strb	r3, [r7, #12]
 80015d0:	8afb      	ldrh	r3, [r7, #22]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	737b      	strb	r3, [r7, #13]
 80015d6:	8abb      	ldrh	r3, [r7, #20]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	73bb      	strb	r3, [r7, #14]
 80015e0:	8abb      	ldrh	r3, [r7, #20]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2104      	movs	r1, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff43 	bl	8001478 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80015f2:	202b      	movs	r0, #43	@ 0x2b
 80015f4:	f7ff ff1c 	bl	8001430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80015f8:	8a7b      	ldrh	r3, [r7, #18]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	723b      	strb	r3, [r7, #8]
 8001602:	8a7b      	ldrh	r3, [r7, #18]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	727b      	strb	r3, [r7, #9]
 8001608:	8a3b      	ldrh	r3, [r7, #16]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	72bb      	strb	r3, [r7, #10]
 8001612:	8a3b      	ldrh	r3, [r7, #16]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	2104      	movs	r1, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff2a 	bl	8001478 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001624:	202c      	movs	r0, #44	@ 0x2c
 8001626:	f7ff ff03 	bl	8001430 <ST7789_WriteCommand>

	ST7789_UnSelect();
 800162a:	2201      	movs	r2, #1
 800162c:	2180      	movs	r1, #128	@ 0x80
 800162e:	4803      	ldr	r0, [pc, #12]	@ (800163c <ST7789_SetAddressWindow+0xb4>)
 8001630:	f001 fe58 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	40020400 	.word	0x40020400

08001640 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b08b      	sub	sp, #44	@ 0x2c
 8001644:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
		HAL_Delay(10);
 8001646:	200a      	movs	r0, #10
 8001648:	f000 fbea 	bl	8001e20 <HAL_Delay>
		ST7789_RST_Set();
 800164c:	2201      	movs	r2, #1
 800164e:	2104      	movs	r1, #4
 8001650:	4853      	ldr	r0, [pc, #332]	@ (80017a0 <ST7789_Init+0x160>)
 8001652:	f001 fe47 	bl	80032e4 <HAL_GPIO_WritePin>
		ST7789_Select();
 8001656:	2200      	movs	r2, #0
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	4851      	ldr	r0, [pc, #324]	@ (80017a0 <ST7789_Init+0x160>)
 800165c:	f001 fe42 	bl	80032e4 <HAL_GPIO_WritePin>
		ST7789_BLK_Set();
 8001660:	2201      	movs	r2, #1
 8001662:	2140      	movs	r1, #64	@ 0x40
 8001664:	484e      	ldr	r0, [pc, #312]	@ (80017a0 <ST7789_Init+0x160>)
 8001666:	f001 fe3d 	bl	80032e4 <HAL_GPIO_WritePin>
		ST7789_RST_Set();
 800166a:	2201      	movs	r2, #1
 800166c:	2104      	movs	r1, #4
 800166e:	484c      	ldr	r0, [pc, #304]	@ (80017a0 <ST7789_Init+0x160>)
 8001670:	f001 fe38 	bl	80032e4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001674:	2005      	movs	r0, #5
 8001676:	f000 fbd3 	bl	8001e20 <HAL_Delay>
		ST7789_RST_Clr();
 800167a:	2200      	movs	r2, #0
 800167c:	2104      	movs	r1, #4
 800167e:	4848      	ldr	r0, [pc, #288]	@ (80017a0 <ST7789_Init+0x160>)
 8001680:	f001 fe30 	bl	80032e4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001684:	2005      	movs	r0, #5
 8001686:	f000 fbcb 	bl	8001e20 <HAL_Delay>
		ST7789_RST_Set();
 800168a:	2201      	movs	r2, #1
 800168c:	2104      	movs	r1, #4
 800168e:	4844      	ldr	r0, [pc, #272]	@ (80017a0 <ST7789_Init+0x160>)
 8001690:	f001 fe28 	bl	80032e4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001694:	2005      	movs	r0, #5
 8001696:	f000 fbc3 	bl	8001e20 <HAL_Delay>

		ST7789_WriteCommand(ST7789_SLPOUT);	//	Out of sleep mode
 800169a:	2011      	movs	r0, #17
 800169c:	f7ff fec8 	bl	8001430 <ST7789_WriteCommand>
		HAL_Delay(10);
 80016a0:	200a      	movs	r0, #10
 80016a2:	f000 fbbd 	bl	8001e20 <HAL_Delay>
		ST7789_WriteCommand(ST7789_MADCTL);
 80016a6:	2036      	movs	r0, #54	@ 0x36
 80016a8:	f7ff fec2 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff ff1b 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80016b2:	203a      	movs	r0, #58	@ 0x3a
 80016b4:	f7ff febc 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x05);
 80016b8:	2005      	movs	r0, #5
 80016ba:	f7ff ff15 	bl	80014e8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80016be:	20b2      	movs	r0, #178	@ 0xb2
 80016c0:	f7ff feb6 	bl	8001430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80016c4:	4a37      	ldr	r2, [pc, #220]	@ (80017a4 <ST7789_Init+0x164>)
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ce:	6018      	str	r0, [r3, #0]
 80016d0:	3304      	adds	r3, #4
 80016d2:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	2105      	movs	r1, #5
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fecc 	bl	8001478 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80016e0:	2002      	movs	r0, #2
 80016e2:	f7ff ff25 	bl	8001530 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80016e6:	20b7      	movs	r0, #183	@ 0xb7
 80016e8:	f7ff fea2 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80016ec:	2035      	movs	r0, #53	@ 0x35
 80016ee:	f7ff fefb 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80016f2:	20bb      	movs	r0, #187	@ 0xbb
 80016f4:	f7ff fe9c 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x28);			//	0.725v (default 0.75v for 0x20)
 80016f8:	2028      	movs	r0, #40	@ 0x28
 80016fa:	f7ff fef5 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80016fe:	20c0      	movs	r0, #192	@ 0xc0
 8001700:	f7ff fe96 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x3C);			//	Default value
 8001704:	203c      	movs	r0, #60	@ 0x3c
 8001706:	f7ff feef 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800170a:	20c2      	movs	r0, #194	@ 0xc2
 800170c:	f7ff fe90 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fee9 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001716:	20c3      	movs	r0, #195	@ 0xc3
 8001718:	f7ff fe8a 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0b);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800171c:	200b      	movs	r0, #11
 800171e:	f7ff fee3 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001722:	20c4      	movs	r0, #196	@ 0xc4
 8001724:	f7ff fe84 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001728:	2020      	movs	r0, #32
 800172a:	f7ff fedd 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800172e:	20c6      	movs	r0, #198	@ 0xc6
 8001730:	f7ff fe7e 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001734:	200f      	movs	r0, #15
 8001736:	f7ff fed7 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800173a:	20d0      	movs	r0, #208	@ 0xd0
 800173c:	f7ff fe78 	bl	8001430 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001740:	20a4      	movs	r0, #164	@ 0xa4
 8001742:	f7ff fed1 	bl	80014e8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001746:	20a1      	movs	r0, #161	@ 0xa1
 8001748:	f7ff fece 	bl	80014e8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800174c:	20e0      	movs	r0, #224	@ 0xe0
 800174e:	f7ff fe6f 	bl	8001430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x01, 0x08, 0x0f, 0x11, 0x2a, 0x36, 0x55, 0x44, 0x3a, 0x0b, 0x06, 0x11, 0x20};
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <ST7789_Init+0x168>)
 8001754:	f107 0410 	add.w	r4, r7, #16
 8001758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175a:	c407      	stmia	r4!, {r0, r1, r2}
 800175c:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	210e      	movs	r1, #14
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe87 	bl	8001478 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800176a:	20e1      	movs	r0, #225	@ 0xe1
 800176c:	f7ff fe60 	bl	8001430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x02, 0x07, 0x0a, 0x0b, 0x18, 0x34, 0x43, 0x4a, 0x2b, 0x1b, 0x1c, 0x22, 0x1f};
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <ST7789_Init+0x16c>)
 8001772:	463c      	mov	r4, r7
 8001774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001776:	c407      	stmia	r4!, {r0, r1, r2}
 8001778:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800177a:	463b      	mov	r3, r7
 800177c:	210e      	movs	r1, #14
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe7a 	bl	8001478 <ST7789_WriteData>
	}
//    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
//  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8001784:	2029      	movs	r0, #41	@ 0x29
 8001786:	f7ff fe53 	bl	8001430 <ST7789_WriteCommand>

	HAL_Delay(50);
 800178a:	2032      	movs	r0, #50	@ 0x32
 800178c:	f000 fb48 	bl	8001e20 <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with White.
 8001790:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001794:	f000 f80c 	bl	80017b0 <ST7789_Fill_Color>
}
 8001798:	bf00      	nop
 800179a:	372c      	adds	r7, #44	@ 0x2c
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	40020400 	.word	0x40020400
 80017a4:	08006b38 	.word	0x08006b38
 80017a8:	08006b40 	.word	0x08006b40
 80017ac:	08006b50 	.word	0x08006b50

080017b0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
	ST7789_Select();
 80017ba:	2200      	movs	r2, #0
 80017bc:	2180      	movs	r1, #128	@ 0x80
 80017be:	481a      	ldr	r0, [pc, #104]	@ (8001828 <ST7789_Fill_Color+0x78>)
 80017c0:	f001 fd90 	bl	80032e4 <HAL_GPIO_WritePin>
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80017c4:	f240 133f 	movw	r3, #319	@ 0x13f
 80017c8:	22ef      	movs	r2, #239	@ 0xef
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fedb 	bl	8001588 <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	81fb      	strh	r3, [r7, #14]
 80017d6:	e01a      	b.n	800180e <ST7789_Fill_Color+0x5e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	81bb      	strh	r3, [r7, #12]
 80017dc:	e010      	b.n	8001800 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	723b      	strb	r3, [r7, #8]
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe3f 	bl	8001478 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80017fa:	89bb      	ldrh	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	81bb      	strh	r3, [r7, #12]
 8001800:	89bb      	ldrh	r3, [r7, #12]
 8001802:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001806:	d3ea      	bcc.n	80017de <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	3301      	adds	r3, #1
 800180c:	81fb      	strh	r3, [r7, #14]
 800180e:	89fb      	ldrh	r3, [r7, #14]
 8001810:	2bef      	cmp	r3, #239	@ 0xef
 8001812:	d9e1      	bls.n	80017d8 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8001814:	2201      	movs	r2, #1
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	4803      	ldr	r0, [pc, #12]	@ (8001828 <ST7789_Fill_Color+0x78>)
 800181a:	f001 fd63 	bl	80032e4 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020400 	.word	0x40020400

0800182c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800182c:	b082      	sub	sp, #8
 800182e:	b580      	push	{r7, lr}
 8001830:	b088      	sub	sp, #32
 8001832:	af00      	add	r7, sp, #0
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
 800183a:	460b      	mov	r3, r1
 800183c:	80bb      	strh	r3, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001842:	2200      	movs	r2, #0
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	4837      	ldr	r0, [pc, #220]	@ (8001924 <ST7789_WriteChar+0xf8>)
 8001848:	f001 fd4c 	bl	80032e4 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800184c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001850:	461a      	mov	r2, r3
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4413      	add	r3, r2
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001860:	4619      	mov	r1, r3
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	440b      	add	r3, r1
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	88b9      	ldrh	r1, [r7, #4]
 800186e:	88f8      	ldrh	r0, [r7, #6]
 8001870:	f7ff fe8a 	bl	8001588 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	e041      	b.n	80018fe <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800187a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	3b20      	subs	r3, #32
 8001880:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4619      	mov	r1, r3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	440b      	add	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	e027      	b.n	80018ec <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80018ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	743b      	strb	r3, [r7, #16]
 80018b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fdd8 	bl	8001478 <ST7789_WriteData>
 80018c8:	e00d      	b.n	80018e6 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80018ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	733b      	strb	r3, [r7, #12]
 80018d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2102      	movs	r1, #2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fdc9 	bl	8001478 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018f0:	461a      	mov	r2, r3
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d3d1      	bcc.n	800189c <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3301      	adds	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001902:	461a      	mov	r2, r3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	4293      	cmp	r3, r2
 8001908:	d3b7      	bcc.n	800187a <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 800190a:	2201      	movs	r2, #1
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <ST7789_WriteChar+0xf8>)
 8001910:	f001 fce8 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800191e:	b002      	add	sp, #8
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40020400 	.word	0x40020400

08001928 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001928:	b082      	sub	sp, #8
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af04      	add	r7, sp, #16
 8001930:	603a      	str	r2, [r7, #0]
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	4603      	mov	r3, r0
 8001936:	80fb      	strh	r3, [r7, #6]
 8001938:	460b      	mov	r3, r1
 800193a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800193c:	2200      	movs	r2, #0
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	4822      	ldr	r0, [pc, #136]	@ (80019cc <ST7789_WriteString+0xa4>)
 8001942:	f001 fccf 	bl	80032e4 <HAL_GPIO_WritePin>
	while (*str) {
 8001946:	e02e      	b.n	80019a6 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	7d3a      	ldrb	r2, [r7, #20]
 800194c:	4413      	add	r3, r2
 800194e:	2bef      	cmp	r3, #239	@ 0xef
 8001950:	dd14      	ble.n	800197c <ST7789_WriteString+0x54>
			x = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001956:	7d7b      	ldrb	r3, [r7, #21]
 8001958:	461a      	mov	r2, r3
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	7d7a      	ldrb	r2, [r7, #21]
 8001964:	4413      	add	r3, r2
 8001966:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800196a:	da21      	bge.n	80019b0 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b20      	cmp	r3, #32
 8001972:	d103      	bne.n	800197c <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	603b      	str	r3, [r7, #0]
				continue;
 800197a:	e014      	b.n	80019a6 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	88b9      	ldrh	r1, [r7, #4]
 8001982:	88f8      	ldrh	r0, [r7, #6]
 8001984:	8c3b      	ldrh	r3, [r7, #32]
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	8bbb      	ldrh	r3, [r7, #28]
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f7ff ff4b 	bl	800182c <ST7789_WriteChar>
		x += font.width;
 8001996:	7d3b      	ldrb	r3, [r7, #20]
 8001998:	461a      	mov	r2, r3
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	4413      	add	r3, r2
 800199e:	80fb      	strh	r3, [r7, #6]
		str++;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	603b      	str	r3, [r7, #0]
	while (*str) {
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1cc      	bne.n	8001948 <ST7789_WriteString+0x20>
 80019ae:	e000      	b.n	80019b2 <ST7789_WriteString+0x8a>
				break;
 80019b0:	bf00      	nop
	}

	ST7789_UnSelect();
 80019b2:	2201      	movs	r2, #1
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <ST7789_WriteString+0xa4>)
 80019b8:	f001 fc94 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019c6:	b002      	add	sp, #8
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_MspInit+0x54>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_MspInit+0x54>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <HAL_MspInit+0x54>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_MspInit+0x54>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <HAL_MspInit+0x54>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <HAL_MspInit+0x54>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	210f      	movs	r1, #15
 8001a12:	f06f 0001 	mvn.w	r0, #1
 8001a16:	f000 ff0a 	bl	800282e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2f      	ldr	r2, [pc, #188]	@ (8001b04 <HAL_ADC_MspInit+0xdc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d157      	bne.n	8001afa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_ADC_MspInit+0xe0>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <HAL_ADC_MspInit+0xe0>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_ADC_MspInit+0xe0>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <HAL_ADC_MspInit+0xe0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a26      	ldr	r2, [pc, #152]	@ (8001b08 <HAL_ADC_MspInit+0xe0>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_ADC_MspInit+0xe0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a82:	2304      	movs	r3, #4
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <HAL_ADC_MspInit+0xe4>)
 8001a96:	f001 fa71 	bl	8002f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <HAL_ADC_MspInit+0xec>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001ab4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001abc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ac0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ade:	480c      	ldr	r0, [pc, #48]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001ae0:	f000 fedc 	bl	800289c <HAL_DMA_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001aea:	f7ff fc9b 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001af2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001af4:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <HAL_ADC_MspInit+0xe8>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40012000 	.word	0x40012000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	2000036c 	.word	0x2000036c
 8001b14:	40026410 	.word	0x40026410

08001b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a3f      	ldr	r2, [pc, #252]	@ (8001c34 <HAL_SPI_MspInit+0x11c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d177      	bne.n	8001c2a <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a3d      	ldr	r2, [pc, #244]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a36      	ldr	r2, [pc, #216]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_SPI_MspInit+0x120>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23c0      	movs	r3, #192	@ 0xc0
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4824      	ldr	r0, [pc, #144]	@ (8001c3c <HAL_SPI_MspInit+0x124>)
 8001baa:	f001 f9e7 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481d      	ldr	r0, [pc, #116]	@ (8001c40 <HAL_SPI_MspInit+0x128>)
 8001bca:	f001 f9d7 	bl	8002f7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <HAL_SPI_MspInit+0x130>)
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bd6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001bda:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bde:	2240      	movs	r2, #64	@ 0x40
 8001be0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bee:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001c10:	f000 fe44 	bl	800289c <HAL_DMA_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001c1a:	f7ff fc03 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001c22:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c24:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <HAL_SPI_MspInit+0x12c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	@ 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40013000 	.word	0x40013000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20000424 	.word	0x20000424
 8001c48:	40026458 	.word	0x40026458

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <NMI_Handler+0x4>

08001c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <MemManage_Handler+0x4>

08001c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c86:	f000 f8ab 	bl	8001de0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c8a:	f003 ffbd 	bl	8005c08 <xTaskGetSchedulerState>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d001      	beq.n	8001c98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c94:	f004 fba0 	bl	80063d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <DMA2_Stream0_IRQHandler+0x10>)
 8001ca2:	f000 ff01 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000036c 	.word	0x2000036c

08001cb0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <DMA2_Stream3_IRQHandler+0x10>)
 8001cb6:	f000 fef7 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000424 	.word	0x20000424

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cec:	f7ff ffea 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	@ (8001d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f004 fe3d 	bl	8006994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1a:	f7ff f8b3 	bl	8000e84 <main>
  bx  lr    
 8001d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d2c:	0800736c 	.word	0x0800736c
  ldr r2, =_sbss
 8001d30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d34:	20004358 	.word	0x20004358

08001d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <HAL_Init+0x40>)
 8001d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <HAL_Init+0x40>)
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <HAL_Init+0x40>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 fd57 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fe2e 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fd6f 	bl	8002882 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 fd37 	bl	800282e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000010 	.word	0x20000010
 8001e04:	200004c0 	.word	0x200004c0

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200004c0 	.word	0x200004c0

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff ffee 	bl	8001e08 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000010 	.word	0x20000010

08001e68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e033      	b.n	8001ee6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fdce 	bl	8001a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eae:	f023 0302 	bic.w	r3, r3, #2
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fa5e 	bl	800237c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ed6:	e001      	b.n	8001edc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Start_DMA+0x1e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0e9      	b.n	80020e2 <HAL_ADC_Start_DMA+0x1f2>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d018      	beq.n	8001f56 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f34:	4b6d      	ldr	r3, [pc, #436]	@ (80020ec <HAL_ADC_Start_DMA+0x1fc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6d      	ldr	r2, [pc, #436]	@ (80020f0 <HAL_ADC_Start_DMA+0x200>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9a      	lsrs	r2, r3, #18
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f48:	e002      	b.n	8001f50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f64:	d107      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f74:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f040 80a1 	bne.w	80020c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f023 0206 	bic.w	r2, r3, #6
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fd2:	e002      	b.n	8001fda <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe2:	4b44      	ldr	r3, [pc, #272]	@ (80020f4 <HAL_ADC_Start_DMA+0x204>)
 8001fe4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fea:	4a43      	ldr	r2, [pc, #268]	@ (80020f8 <HAL_ADC_Start_DMA+0x208>)
 8001fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <HAL_ADC_Start_DMA+0x20c>)
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	4a41      	ldr	r2, [pc, #260]	@ (8002100 <HAL_ADC_Start_DMA+0x210>)
 8001ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002006:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002016:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002026:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	334c      	adds	r3, #76	@ 0x4c
 8002032:	4619      	mov	r1, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f000 fcde 	bl	80029f8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d12a      	bne.n	800209e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2d      	ldr	r2, [pc, #180]	@ (8002104 <HAL_ADC_Start_DMA+0x214>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d015      	beq.n	800207e <HAL_ADC_Start_DMA+0x18e>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <HAL_ADC_Start_DMA+0x218>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d105      	bne.n	8002068 <HAL_ADC_Start_DMA+0x178>
 800205c:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <HAL_ADC_Start_DMA+0x204>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a27      	ldr	r2, [pc, #156]	@ (800210c <HAL_ADC_Start_DMA+0x21c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d136      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
 8002072:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <HAL_ADC_Start_DMA+0x204>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d130      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d129      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e020      	b.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <HAL_ADC_Start_DMA+0x214>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d11b      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d114      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	e00b      	b.n	80020e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	40012300 	.word	0x40012300
 80020f8:	08002575 	.word	0x08002575
 80020fc:	0800262f 	.word	0x0800262f
 8002100:	0800264b 	.word	0x0800264b
 8002104:	40012000 	.word	0x40012000
 8002108:	40012100 	.word	0x40012100
 800210c:	40012200 	.word	0x40012200

08002110 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1c>
 8002150:	2302      	movs	r3, #2
 8002152:	e105      	b.n	8002360 <HAL_ADC_ConfigChannel+0x228>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d925      	bls.n	80021b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	2207      	movs	r2, #7
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68d9      	ldr	r1, [r3, #12]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	4603      	mov	r3, r0
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4403      	add	r3, r0
 80021a2:	3b1e      	subs	r3, #30
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e022      	b.n	80021f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	2207      	movs	r2, #7
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6919      	ldr	r1, [r3, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4403      	add	r3, r0
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d824      	bhi.n	8002248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b05      	subs	r3, #5
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	635a      	str	r2, [r3, #52]	@ 0x34
 8002246:	e04c      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d824      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	@ 0x23
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43da      	mvns	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	400a      	ands	r2, r1
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4618      	mov	r0, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b23      	subs	r3, #35	@ 0x23
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
 8002298:	e023      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b41      	subs	r3, #65	@ 0x41
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b41      	subs	r3, #65	@ 0x41
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <HAL_ADC_ConfigChannel+0x234>)
 80022e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <HAL_ADC_ConfigChannel+0x238>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1cc>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <HAL_ADC_ConfigChannel+0x238>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d123      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x21e>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d003      	beq.n	800231e <HAL_ADC_ConfigChannel+0x1e6>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b11      	cmp	r3, #17
 800231c:	d11b      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b10      	cmp	r3, #16
 8002330:	d111      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_ADC_ConfigChannel+0x23c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a10      	ldr	r2, [pc, #64]	@ (8002378 <HAL_ADC_ConfigChannel+0x240>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	0c9a      	lsrs	r2, r3, #18
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002348:	e002      	b.n	8002350 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3b01      	subs	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f9      	bne.n	800234a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40012300 	.word	0x40012300
 8002370:	40012000 	.word	0x40012000
 8002374:	20000008 	.word	0x20000008
 8002378:	431bde83 	.word	0x431bde83

0800237c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002384:	4b79      	ldr	r3, [pc, #484]	@ (800256c <ADC_Init+0x1f0>)
 8002386:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	021a      	lsls	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	4a58      	ldr	r2, [pc, #352]	@ (8002570 <ADC_Init+0x1f4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d022      	beq.n	800245a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e00f      	b.n	800247a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002478:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0202 	bic.w	r2, r2, #2
 8002488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e1b      	ldrb	r3, [r3, #24]
 8002494:	005a      	lsls	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	3b01      	subs	r3, #1
 80024d4:	035a      	lsls	r2, r3, #13
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	e007      	b.n	80024f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	3b01      	subs	r3, #1
 800250c:	051a      	lsls	r2, r3, #20
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002532:	025a      	lsls	r2, r3, #9
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	029a      	lsls	r2, r3, #10
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40012300 	.word	0x40012300
 8002570:	0f000001 	.word	0x0f000001

08002574 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002580:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d13c      	bne.n	8002608 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12b      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d127      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d119      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0220 	bic.w	r2, r2, #32
 80025da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7fe fe49 	bl	8001298 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002606:	e00e      	b.n	8002626 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fd85 	bl	8002124 <HAL_ADC_ErrorCallback>
}
 800261a:	e004      	b.n	8002626 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff fd67 	bl	8002110 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002656:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff fd5a 	bl	8002124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	@ (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	@ (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	@ 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff29 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff3e 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff8e 	bl	800276c <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff31 	bl	80026dc <__NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffa2 	bl	80027d4 <SysTick_Config>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff faae 	bl	8001e08 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e099      	b.n	80029ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d8:	e00f      	b.n	80028fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028da:	f7ff fa95 	bl	8001e08 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d908      	bls.n	80028fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e078      	b.n	80029ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e8      	bne.n	80028da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_DMA_Init+0x158>)
 8002914:	4013      	ands	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2b04      	cmp	r3, #4
 8002952:	d107      	bne.n	8002964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	4313      	orrs	r3, r2
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 0307 	bic.w	r3, r3, #7
 800297a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	2b04      	cmp	r3, #4
 800298c:	d117      	bne.n	80029be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa6f 	bl	8002e84 <DMA_CheckFifoParam>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029ba:	2301      	movs	r3, #1
 80029bc:	e016      	b.n	80029ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa26 	bl	8002e18 <DMA_CalcBaseAndBitshift>
 80029cc:	4603      	mov	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	223f      	movs	r2, #63	@ 0x3f
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	f010803f 	.word	0xf010803f

080029f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_Start_IT+0x26>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e040      	b.n	8002aa0 <HAL_DMA_Start_IT+0xa8>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d12f      	bne.n	8002a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f9b8 	bl	8002dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	223f      	movs	r2, #63	@ 0x3f
 8002a52:	409a      	lsls	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0216 	orr.w	r2, r2, #22
 8002a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0208 	orr.w	r2, r2, #8
 8002a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e005      	b.n	8002a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf0 <HAL_DMA_IRQHandler+0x248>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8002cf4 <HAL_DMA_IRQHandler+0x24c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	2208      	movs	r2, #8
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	2201      	movs	r2, #1
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	2204      	movs	r2, #4
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	2210      	movs	r2, #16
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d043      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03c      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d024      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e01f      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0208 	bic.w	r2, r2, #8
 8002c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 808f 	beq.w	8002d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8087 	beq.w	8002d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2220      	movs	r2, #32
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d136      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x1da>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	223f      	movs	r2, #63	@ 0x3f
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d07e      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
        }
        return;
 8002cbe:	e079      	b.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01d      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e02c      	b.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
 8002cee:	bf00      	nop
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
 8002d08:	e01e      	b.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10f      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0210 	bic.w	r2, r2, #16
 8002d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d032      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2205      	movs	r2, #5
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d307      	bcc.n	8002d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f2      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x2cc>
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002db4:	bf00      	nop
    }
  }
}
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b40      	cmp	r3, #64	@ 0x40
 8002de8:	d108      	bne.n	8002dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dfa:	e007      	b.n	8002e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3b10      	subs	r3, #16
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <DMA_CalcBaseAndBitshift+0x64>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <DMA_CalcBaseAndBitshift+0x68>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d909      	bls.n	8002e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e58:	e007      	b.n	8002e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	aaaaaaab 	.word	0xaaaaaaab
 8002e80:	08007354 	.word	0x08007354

08002e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d856      	bhi.n	8002f52 <DMA_CheckFifoParam+0xce>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <DMA_CheckFifoParam+0x28>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecf 	.word	0x08002ecf
 8002eb4:	08002ebd 	.word	0x08002ebd
 8002eb8:	08002f53 	.word	0x08002f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d046      	beq.n	8002f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e043      	b.n	8002f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed6:	d140      	bne.n	8002f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e03d      	b.n	8002f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee6:	d121      	bne.n	8002f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d837      	bhi.n	8002f5e <DMA_CheckFifoParam+0xda>
 8002eee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <DMA_CheckFifoParam+0x70>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f0b 	.word	0x08002f0b
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f1d 	.word	0x08002f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e030      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d025      	beq.n	8002f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e022      	b.n	8002f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f24:	d11f      	bne.n	8002f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f2a:	e01c      	b.n	8002f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d903      	bls.n	8002f3a <DMA_CheckFifoParam+0xb6>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d003      	beq.n	8002f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f38:	e018      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3e:	e015      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e00b      	b.n	8002f6a <DMA_CheckFifoParam+0xe6>
      break;
 8002f52:	bf00      	nop
 8002f54:	e00a      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e008      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e006      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e16b      	b.n	8003270 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 815a 	bne.w	800326a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d017      	beq.n	800306c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d123      	bne.n	80030c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80b4 	beq.w	800326a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b60      	ldr	r3, [pc, #384]	@ (8003288 <HAL_GPIO_Init+0x30c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4a5f      	ldr	r2, [pc, #380]	@ (8003288 <HAL_GPIO_Init+0x30c>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003110:	6453      	str	r3, [r2, #68]	@ 0x44
 8003112:	4b5d      	ldr	r3, [pc, #372]	@ (8003288 <HAL_GPIO_Init+0x30c>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311e:	4a5b      	ldr	r2, [pc, #364]	@ (800328c <HAL_GPIO_Init+0x310>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <HAL_GPIO_Init+0x314>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <HAL_GPIO_Init+0x226>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a51      	ldr	r2, [pc, #324]	@ (8003294 <HAL_GPIO_Init+0x318>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d025      	beq.n	800319e <HAL_GPIO_Init+0x222>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_GPIO_Init+0x31c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <HAL_GPIO_Init+0x21e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4f      	ldr	r2, [pc, #316]	@ (800329c <HAL_GPIO_Init+0x320>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x21a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4e      	ldr	r2, [pc, #312]	@ (80032a0 <HAL_GPIO_Init+0x324>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x216>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4d      	ldr	r2, [pc, #308]	@ (80032a4 <HAL_GPIO_Init+0x328>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x212>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4c      	ldr	r2, [pc, #304]	@ (80032a8 <HAL_GPIO_Init+0x32c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x20e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4b      	ldr	r2, [pc, #300]	@ (80032ac <HAL_GPIO_Init+0x330>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x20a>
 8003182:	2307      	movs	r3, #7
 8003184:	e00e      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 8003186:	2308      	movs	r3, #8
 8003188:	e00c      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800318a:	2306      	movs	r3, #6
 800318c:	e00a      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800318e:	2305      	movs	r3, #5
 8003190:	e008      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 8003192:	2304      	movs	r3, #4
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 8003196:	2303      	movs	r3, #3
 8003198:	e004      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800319a:	2302      	movs	r3, #2
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 80031a2:	2300      	movs	r3, #0
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	f002 0203 	and.w	r2, r2, #3
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	4093      	lsls	r3, r2
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b4:	4935      	ldr	r1, [pc, #212]	@ (800328c <HAL_GPIO_Init+0x310>)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c2:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e6:	4a32      	ldr	r2, [pc, #200]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ec:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003210:	4a27      	ldr	r2, [pc, #156]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003216:	4b26      	ldr	r3, [pc, #152]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323a:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003264:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <HAL_GPIO_Init+0x334>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3301      	adds	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	f67f ae90 	bls.w	8002f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	3724      	adds	r7, #36	@ 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	40013800 	.word	0x40013800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40020800 	.word	0x40020800
 800329c:	40020c00 	.word	0x40020c00
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40021400 	.word	0x40021400
 80032a8:	40021800 	.word	0x40021800
 80032ac:	40021c00 	.word	0x40021c00
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e001      	b.n	80032d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	041a      	lsls	r2, r3, #16
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43d9      	mvns	r1, r3
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	400b      	ands	r3, r1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e267      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d075      	beq.n	8003456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800336a:	4b88      	ldr	r3, [pc, #544]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00c      	beq.n	8003390 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b85      	ldr	r3, [pc, #532]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800337e:	2b08      	cmp	r3, #8
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b82      	ldr	r3, [pc, #520]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b7e      	ldr	r3, [pc, #504]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e242      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x74>
 80033b2:	4b76      	ldr	r3, [pc, #472]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4b70      	ldr	r3, [pc, #448]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6f      	ldr	r2, [pc, #444]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b6d      	ldr	r3, [pc, #436]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6c      	ldr	r2, [pc, #432]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033e4:	4b69      	ldr	r3, [pc, #420]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a68      	ldr	r2, [pc, #416]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b66      	ldr	r3, [pc, #408]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a65      	ldr	r2, [pc, #404]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fd00 	bl	8001e08 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe fcfc 	bl	8001e08 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e207      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b5b      	ldr	r3, [pc, #364]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fcec 	bl	8001e08 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fce8 	bl	8001e08 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	@ 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1f3      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b51      	ldr	r3, [pc, #324]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0xe8>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003462:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b44      	ldr	r3, [pc, #272]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b41      	ldr	r3, [pc, #260]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e1c7      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b3b      	ldr	r3, [pc, #236]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4937      	ldr	r1, [pc, #220]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <HAL_RCC_OscConfig+0x244>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe fca1 	bl	8001e08 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe fc9d 	bl	8001e08 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1a8      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b2b      	ldr	r3, [pc, #172]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b28      	ldr	r3, [pc, #160]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4925      	ldr	r1, [pc, #148]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x244>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe fc80 	bl	8001e08 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350c:	f7fe fc7c 	bl	8001e08 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e187      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d036      	beq.n	80035a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <HAL_RCC_OscConfig+0x248>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fe fc60 	bl	8001e08 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354c:	f7fe fc5c 	bl	8001e08 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e167      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_RCC_OscConfig+0x240>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x200>
 800356a:	e01b      	b.n	80035a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_OscConfig+0x248>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fe fc49 	bl	8001e08 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e00e      	b.n	8003598 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fe fc45 	bl	8001e08 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d907      	bls.n	8003598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e150      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
 800358c:	40023800 	.word	0x40023800
 8003590:	42470000 	.word	0x42470000
 8003594:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ea      	bne.n	800357a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8097 	beq.w	80036e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b81      	ldr	r3, [pc, #516]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	4b7d      	ldr	r3, [pc, #500]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	4a7c      	ldr	r2, [pc, #496]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d2:	4b7a      	ldr	r3, [pc, #488]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b77      	ldr	r3, [pc, #476]	@ (80037c0 <HAL_RCC_OscConfig+0x474>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ee:	4b74      	ldr	r3, [pc, #464]	@ (80037c0 <HAL_RCC_OscConfig+0x474>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a73      	ldr	r2, [pc, #460]	@ (80037c0 <HAL_RCC_OscConfig+0x474>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fa:	f7fe fc05 	bl	8001e08 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fe fc01 	bl	8001e08 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e10c      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b6a      	ldr	r3, [pc, #424]	@ (80037c0 <HAL_RCC_OscConfig+0x474>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x2ea>
 8003628:	4b64      	ldr	r3, [pc, #400]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	4a63      	ldr	r2, [pc, #396]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
 8003634:	e01c      	b.n	8003670 <HAL_RCC_OscConfig+0x324>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x30c>
 800363e:	4b5f      	ldr	r3, [pc, #380]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	4a5e      	ldr	r2, [pc, #376]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	@ 0x70
 800364a:	4b5c      	ldr	r3, [pc, #368]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	4a5b      	ldr	r2, [pc, #364]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	@ 0x70
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0x324>
 8003658:	4b58      	ldr	r3, [pc, #352]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	4a57      	ldr	r2, [pc, #348]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	@ 0x70
 8003664:	4b55      	ldr	r3, [pc, #340]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	4a54      	ldr	r2, [pc, #336]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fe fbc6 	bl	8001e08 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fe fbc2 	bl	8001e08 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0cb      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	4b49      	ldr	r3, [pc, #292]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ee      	beq.n	8003680 <HAL_RCC_OscConfig+0x334>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a4:	f7fe fbb0 	bl	8001e08 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe fbac 	bl	8001e08 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0b5      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	4b3e      	ldr	r3, [pc, #248]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ee      	bne.n	80036ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b39      	ldr	r3, [pc, #228]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	4a38      	ldr	r2, [pc, #224]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a1 	beq.w	800382c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ea:	4b34      	ldr	r3, [pc, #208]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d05c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d141      	bne.n	8003782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b31      	ldr	r3, [pc, #196]	@ (80037c4 <HAL_RCC_OscConfig+0x478>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fb80 	bl	8001e08 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370c:	f7fe fb7c 	bl	8001e08 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e087      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	491b      	ldr	r1, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003754:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_RCC_OscConfig+0x478>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fb55 	bl	8001e08 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe fb51 	bl	8001e08 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e05c      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x416>
 8003780:	e054      	b.n	800382c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fb3e 	bl	8001e08 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe fb3a 	bl	8001e08 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e045      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x444>
 80037ae:	e03d      	b.n	800382c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e038      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000
 80037c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_RCC_OscConfig+0x4ec>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d028      	beq.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d121      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d11a      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003800:	4293      	cmp	r3, r2
 8003802:	d111      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	3b01      	subs	r3, #1
 8003812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d107      	bne.n	8003828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800

0800383c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0cc      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b68      	ldr	r3, [pc, #416]	@ (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d90c      	bls.n	8003878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b65      	ldr	r3, [pc, #404]	@ (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	@ (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a58      	ldr	r2, [pc, #352]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800389a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a52      	ldr	r2, [pc, #328]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d044      	beq.n	800395c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d119      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	4b3f      	ldr	r3, [pc, #252]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e06f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390a:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e067      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b37      	ldr	r3, [pc, #220]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4934      	ldr	r1, [pc, #208]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800392c:	f7fe fa6c 	bl	8001e08 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fe fa68 	bl	8001e08 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e04f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d20c      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ae:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	@ (80039fc <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe f9cc 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023c00 	.word	0x40023c00
 80039f8:	40023800 	.word	0x40023800
 80039fc:	08007344 	.word	0x08007344
 8003a00:	20000008 	.word	0x20000008
 8003a04:	2000000c 	.word	0x2000000c

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b090      	sub	sp, #64	@ 0x40
 8003a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a20:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	f200 80a1 	bhi.w	8003b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3a:	e09b      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a40:	e09b      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a42:	4b53      	ldr	r3, [pc, #332]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a46:	e098      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4b4f      	ldr	r3, [pc, #316]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a52:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	2200      	movs	r2, #0
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a70:	2100      	movs	r1, #0
 8003a72:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a74:	fb03 f201 	mul.w	r2, r3, r1
 8003a78:	2300      	movs	r3, #0
 8003a7a:	fb00 f303 	mul.w	r3, r0, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a43      	ldr	r2, [pc, #268]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a82:	fba0 1202 	umull	r1, r2, r0, r2
 8003a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a88:	460a      	mov	r2, r1
 8003a8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a8e:	4413      	add	r3, r2
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	2200      	movs	r2, #0
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003aa2:	f7fc ffb3 	bl	8000a0c <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4613      	mov	r3, r2
 8003aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aae:	e053      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab0:	4b35      	ldr	r3, [pc, #212]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	617a      	str	r2, [r7, #20]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ac2:	f04f 0b00 	mov.w	fp, #0
 8003ac6:	4652      	mov	r2, sl
 8003ac8:	465b      	mov	r3, fp
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	0159      	lsls	r1, r3, #5
 8003ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad8:	0150      	lsls	r0, r2, #5
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	ebb2 080a 	subs.w	r8, r2, sl
 8003ae2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003af2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003af6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003afa:	ebb2 0408 	subs.w	r4, r2, r8
 8003afe:	eb63 0509 	sbc.w	r5, r3, r9
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	00eb      	lsls	r3, r5, #3
 8003b0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b10:	00e2      	lsls	r2, r4, #3
 8003b12:	4614      	mov	r4, r2
 8003b14:	461d      	mov	r5, r3
 8003b16:	eb14 030a 	adds.w	r3, r4, sl
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	eb45 030b 	adc.w	r3, r5, fp
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b2e:	4629      	mov	r1, r5
 8003b30:	028b      	lsls	r3, r1, #10
 8003b32:	4621      	mov	r1, r4
 8003b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b38:	4621      	mov	r1, r4
 8003b3a:	028a      	lsls	r2, r1, #10
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	2200      	movs	r2, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	60fa      	str	r2, [r7, #12]
 8003b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b4c:	f7fc ff5e 	bl	8000a0c <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	3301      	adds	r3, #1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b72:	e002      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3740      	adds	r7, #64	@ 0x40
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	017d7840 	.word	0x017d7840

08003b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07b      	b.n	8003c9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb6:	d009      	beq.n	8003bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	e005      	b.n	8003bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd ff96 	bl	8001b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0104 	and.w	r1, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	f003 0210 	and.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b088      	sub	sp, #32
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb6:	f7fe f8a7 	bl	8001e08 <HAL_GetTick>
 8003cba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d001      	beq.n	8003cd0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e12a      	b.n	8003f26 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Transmit+0x36>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e122      	b.n	8003f26 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_SPI_Transmit+0x48>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e11b      	b.n	8003f26 <HAL_SPI_Transmit+0x280>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b40      	cmp	r3, #64	@ 0x40
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d84:	d152      	bne.n	8003e2c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_Transmit+0xee>
 8003d8e:	8b7b      	ldrh	r3, [r7, #26]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d145      	bne.n	8003e20 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003db8:	e032      	b.n	8003e20 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d112      	bne.n	8003dee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003dec:	e018      	b.n	8003e20 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fe f80b 	bl	8001e08 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d803      	bhi.n	8003e06 <HAL_SPI_Transmit+0x160>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Transmit+0x166>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e082      	b.n	8003f26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1c7      	bne.n	8003dba <HAL_SPI_Transmit+0x114>
 8003e2a:	e053      	b.n	8003ed4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Transmit+0x194>
 8003e34:	8b7b      	ldrh	r3, [r7, #26]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d147      	bne.n	8003eca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e60:	e033      	b.n	8003eca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d113      	bne.n	8003e98 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	7812      	ldrb	r2, [r2, #0]
 8003e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e96:	e018      	b.n	8003eca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e98:	f7fd ffb6 	bl	8001e08 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d803      	bhi.n	8003eb0 <HAL_SPI_Transmit+0x20a>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d102      	bne.n	8003eb6 <HAL_SPI_Transmit+0x210>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e02d      	b.n	8003f26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1c6      	bne.n	8003e62 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f8b1 	bl	8004040 <SPI_EndRxTxTransaction>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f40:	f7fd ff62 	bl	8001e08 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f50:	f7fd ff5a 	bl	8001e08 <HAL_GetTick>
 8003f54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f56:	4b39      	ldr	r3, [pc, #228]	@ (800403c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	015b      	lsls	r3, r3, #5
 8003f5c:	0d1b      	lsrs	r3, r3, #20
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f66:	e054      	b.n	8004012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d050      	beq.n	8004012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f70:	f7fd ff4a 	bl	8001e08 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d902      	bls.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d13d      	bne.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f9e:	d111      	bne.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa8:	d004      	beq.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb2:	d107      	bne.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fcc:	d10f      	bne.n	8003fee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e017      	b.n	8004032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3b01      	subs	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	429a      	cmp	r2, r3
 800402e:	d19b      	bne.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000008 	.word	0x20000008

08004040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2201      	movs	r2, #1
 8004054:	2102      	movs	r1, #2
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ff6a 	bl	8003f30 <SPI_WaitFlagStateUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e032      	b.n	80040d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004072:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <SPI_EndRxTxTransaction+0xa0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <SPI_EndRxTxTransaction+0xa4>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0d5b      	lsrs	r3, r3, #21
 800407e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004090:	d112      	bne.n	80040b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	@ 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ff47 	bl	8003f30 <SPI_WaitFlagStateUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e00f      	b.n	80040d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b80      	cmp	r3, #128	@ 0x80
 80040d0:	d0f2      	beq.n	80040b8 <SPI_EndRxTxTransaction+0x78>
 80040d2:	e000      	b.n	80040d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80040d4:	bf00      	nop
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000008 	.word	0x20000008
 80040e4:	165e9f81 	.word	0x165e9f81

080040e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fa:	2b84      	cmp	r3, #132	@ 0x84
 80040fc:	d005      	beq.n	800410a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	3303      	adds	r3, #3
 8004108:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800411e:	f3ef 8305 	mrs	r3, IPSR
 8004122:	607b      	str	r3, [r7, #4]
  return(result);
 8004124:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004140:	f001 f942 	bl	80053c8 <vTaskStartScheduler>
  
  return osOK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd80      	pop	{r7, pc}

0800414a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800414a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414c:	b089      	sub	sp, #36	@ 0x24
 800414e:	af04      	add	r7, sp, #16
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <osThreadCreate+0x54>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685c      	ldr	r4, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691e      	ldr	r6, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ffb6 	bl	80040e8 <makeFreeRtosPriority>
 800417c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004186:	9202      	str	r2, [sp, #8]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	9100      	str	r1, [sp, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4632      	mov	r2, r6
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f000 ff32 	bl	8004ffc <xTaskCreateStatic>
 8004198:	4603      	mov	r3, r0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e01c      	b.n	80041d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685c      	ldr	r4, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff98 	bl	80040e8 <makeFreeRtosPriority>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4632      	mov	r2, r6
 80041c6:	4629      	mov	r1, r5
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 ff77 	bl	80050bc <xTaskCreate>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <osDelay+0x16>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e000      	b.n	80041fa <osDelay+0x18>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f8ae 	bl	800535c <vTaskDelay>
  
  return osOK;
 8004200:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af02      	add	r7, sp, #8
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00f      	beq.n	800423c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10a      	bne.n	8004238 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2203      	movs	r2, #3
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	2100      	movs	r1, #0
 800422e:	2001      	movs	r0, #1
 8004230:	f000 f9c0 	bl	80045b4 <xQueueGenericCreateStatic>
 8004234:	4603      	mov	r3, r0
 8004236:	e016      	b.n	8004266 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	e014      	b.n	8004266 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d110      	bne.n	8004264 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004242:	2203      	movs	r2, #3
 8004244:	2100      	movs	r1, #0
 8004246:	2001      	movs	r0, #1
 8004248:	f000 fa31 	bl	80046ae <xQueueGenericCreate>
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <osSemaphoreCreate+0x56>
 8004254:	2300      	movs	r3, #0
 8004256:	2200      	movs	r2, #0
 8004258:	2100      	movs	r1, #0
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa82 	bl	8004764 <xQueueGenericSend>
      return sema;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	e000      	b.n	8004266 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004264:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004284:	2380      	movs	r3, #128	@ 0x80
 8004286:	e03a      	b.n	80042fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d103      	bne.n	800429c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004294:	f04f 33ff 	mov.w	r3, #4294967295
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e009      	b.n	80042b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80042b0:	f7ff ff32 	bl	8004118 <inHandlerMode>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	461a      	mov	r2, r3
 80042c0:	2100      	movs	r1, #0
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fcf0 	bl	8004ca8 <xQueueReceiveFromISR>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d001      	beq.n	80042d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80042ce:	23ff      	movs	r3, #255	@ 0xff
 80042d0:	e015      	b.n	80042fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d011      	beq.n	80042fc <osSemaphoreWait+0x8c>
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <osSemaphoreWait+0x98>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	e008      	b.n	80042fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fbcb 	bl	8004a88 <xQueueSemaphoreTake>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80042f8:	23ff      	movs	r3, #255	@ 0xff
 80042fa:	e000      	b.n	80042fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800431c:	f7ff fefc 	bl	8004118 <inHandlerMode>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb1b 	bl	8004968 <xQueueGiveFromISR>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	d001      	beq.n	800433c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004338:	23ff      	movs	r3, #255	@ 0xff
 800433a:	e017      	b.n	800436c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d013      	beq.n	800436a <osSemaphoreRelease+0x5e>
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <osSemaphoreRelease+0x68>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	e00a      	b.n	800436a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004354:	2300      	movs	r3, #0
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa02 	bl	8004764 <xQueueGenericSend>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004366:	23ff      	movs	r3, #255	@ 0xff
 8004368:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f103 0208 	add.w	r2, r3, #8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f103 0208 	add.w	r2, r3, #8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f103 0208 	add.w	r2, r3, #8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d103      	bne.n	800443a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e00c      	b.n	8004454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3308      	adds	r3, #8
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e002      	b.n	8004448 <vListInsert+0x2e>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d2f6      	bcs.n	8004442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6892      	ldr	r2, [r2, #8]
 80044a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6852      	ldr	r2, [r2, #4]
 80044ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d103      	bne.n	80044c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	1e5a      	subs	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800450c:	f001 fed4 	bl	80062b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	3b01      	subs	r3, #1
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	441a      	add	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	22ff      	movs	r2, #255	@ 0xff
 8004550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	22ff      	movs	r2, #255	@ 0xff
 8004558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d114      	bne.n	800458c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01a      	beq.n	80045a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3310      	adds	r3, #16
 800456e:	4618      	mov	r0, r3
 8004570:	f001 f984 	bl	800587c <xTaskRemoveFromEventList>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <xQueueGenericReset+0xd0>)
 800457c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	e009      	b.n	80045a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3310      	adds	r3, #16
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fef1 	bl	8004378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3324      	adds	r3, #36	@ 0x24
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff feec 	bl	8004378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045a0:	f001 febc 	bl	800631c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045a4:	2301      	movs	r3, #1
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08e      	sub	sp, #56	@ 0x38
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	e7fd      	b.n	80045fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <xQueueGenericCreateStatic+0x56>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <xQueueGenericCreateStatic+0x5a>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericCreateStatic+0x5c>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10b      	bne.n	800462c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	623b      	str	r3, [r7, #32]
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	e7fd      	b.n	8004628 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <xQueueGenericCreateStatic+0x84>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <xQueueGenericCreateStatic+0x88>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <xQueueGenericCreateStatic+0x8a>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	61fb      	str	r3, [r7, #28]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800465a:	2348      	movs	r3, #72	@ 0x48
 800465c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b48      	cmp	r3, #72	@ 0x48
 8004662:	d00b      	beq.n	800467c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	61bb      	str	r3, [r7, #24]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800467c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004690:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f840 	bl	8004724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3730      	adds	r7, #48	@ 0x30
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b08a      	sub	sp, #40	@ 0x28
 80046b2:	af02      	add	r7, sp, #8
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	4613      	mov	r3, r2
 80046ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <xQueueGenericCreate+0x2c>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	613b      	str	r3, [r7, #16]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3348      	adds	r3, #72	@ 0x48
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 ff07 	bl	80064fc <pvPortMalloc>
 80046ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d011      	beq.n	800471a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3348      	adds	r3, #72	@ 0x48
 80046fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004708:	79fa      	ldrb	r2, [r7, #7]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f805 	bl	8004724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800471a:	69bb      	ldr	r3, [r7, #24]
	}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e002      	b.n	8004746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004752:	2101      	movs	r1, #1
 8004754:	69b8      	ldr	r0, [r7, #24]
 8004756:	f7ff fec3 	bl	80044e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	@ 0x38
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <xQueueGenericSend+0x34>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSend+0x42>
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <xQueueGenericSend+0x46>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericSend+0x48>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <xQueueGenericSend+0x64>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d103      	bne.n	80047d6 <xQueueGenericSend+0x72>
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <xQueueGenericSend+0x76>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <xQueueGenericSend+0x78>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xQueueGenericSend+0x94>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047f8:	f001 fa06 	bl	8005c08 <xTaskGetSchedulerState>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <xQueueGenericSend+0xa4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <xQueueGenericSend+0xa8>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <xQueueGenericSend+0xaa>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <xQueueGenericSend+0xc6>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61fb      	str	r3, [r7, #28]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800482a:	f001 fd45 	bl	80062b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <xQueueGenericSend+0xdc>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d129      	bne.n	8004894 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004846:	f000 fac9 	bl	8004ddc <prvCopyDataToQueue>
 800484a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	3324      	adds	r3, #36	@ 0x24
 8004858:	4618      	mov	r0, r3
 800485a:	f001 f80f 	bl	800587c <xTaskRemoveFromEventList>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d013      	beq.n	800488c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004864:	4b3f      	ldr	r3, [pc, #252]	@ (8004964 <xQueueGenericSend+0x200>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	e00a      	b.n	800488c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800487c:	4b39      	ldr	r3, [pc, #228]	@ (8004964 <xQueueGenericSend+0x200>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800488c:	f001 fd46 	bl	800631c <vPortExitCritical>
				return pdPASS;
 8004890:	2301      	movs	r3, #1
 8004892:	e063      	b.n	800495c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800489a:	f001 fd3f 	bl	800631c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	e05c      	b.n	800495c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f849 	bl	8005944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b6:	f001 fd31 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ba:	f000 fdef 	bl	800549c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048be:	f001 fcfb 	bl	80062b8 <vPortEnterCritical>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d103      	bne.n	80048d8 <xQueueGenericSend+0x174>
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d103      	bne.n	80048ee <xQueueGenericSend+0x18a>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ee:	f001 fd15 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048f2:	1d3a      	adds	r2, r7, #4
 80048f4:	f107 0314 	add.w	r3, r7, #20
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 f838 	bl	8005970 <xTaskCheckForTimeOut>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d124      	bne.n	8004950 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004908:	f000 fb60 	bl	8004fcc <prvIsQueueFull>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	3310      	adds	r3, #16
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ff88 	bl	8005830 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004922:	f000 faeb 	bl	8004efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004926:	f000 fdc7 	bl	80054b8 <xTaskResumeAll>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	f47f af7c 	bne.w	800482a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <xQueueGenericSend+0x200>)
 8004934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	e772      	b.n	800482a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004946:	f000 fad9 	bl	8004efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800494a:	f000 fdb5 	bl	80054b8 <xTaskResumeAll>
 800494e:	e76c      	b.n	800482a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004952:	f000 fad3 	bl	8004efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004956:	f000 fdaf 	bl	80054b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800495a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800495c:	4618      	mov	r0, r3
 800495e:	3738      	adds	r7, #56	@ 0x38
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	@ 0x38
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	623b      	str	r3, [r7, #32]
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61fb      	str	r3, [r7, #28]
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <xQueueGiveFromISR+0x5c>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <xQueueGiveFromISR+0x60>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <xQueueGiveFromISR+0x62>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10b      	bne.n	80049e6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	61bb      	str	r3, [r7, #24]
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	e7fd      	b.n	80049e2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049e6:	f001 fd47 	bl	8006478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049ea:	f3ef 8211 	mrs	r2, BASEPRI
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	617a      	str	r2, [r7, #20]
 8004a00:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d22b      	bcs.n	8004a6e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d112      	bne.n	8004a58 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	3324      	adds	r3, #36	@ 0x24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 ff1c 	bl	800587c <xTaskRemoveFromEventList>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00e      	beq.n	8004a68 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e007      	b.n	8004a68 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	b25a      	sxtb	r2, r3
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6c:	e001      	b.n	8004a72 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3738      	adds	r7, #56	@ 0x38
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08e      	sub	sp, #56	@ 0x38
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	623b      	str	r3, [r7, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61fb      	str	r3, [r7, #28]
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004adc:	f001 f894 	bl	8005c08 <xTaskGetSchedulerState>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <xQueueSemaphoreTake+0x64>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <xQueueSemaphoreTake+0x68>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <xQueueSemaphoreTake+0x6a>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	61bb      	str	r3, [r7, #24]
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	e7fd      	b.n	8004b0a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b0e:	f001 fbd3 	bl	80062b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d024      	beq.n	8004b68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b20:	1e5a      	subs	r2, r3, #1
 8004b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b2e:	f001 fa17 	bl	8005f60 <pvTaskIncrementMutexHeldCount>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00f      	beq.n	8004b60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b42:	3310      	adds	r3, #16
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fe99 	bl	800587c <xTaskRemoveFromEventList>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b50:	4b54      	ldr	r3, [pc, #336]	@ (8004ca4 <xQueueSemaphoreTake+0x21c>)
 8004b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b60:	f001 fbdc 	bl	800631c <vPortExitCritical>
				return pdPASS;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e098      	b.n	8004c9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d112      	bne.n	8004b94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	617b      	str	r3, [r7, #20]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b8c:	f001 fbc6 	bl	800631c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e082      	b.n	8004c9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fed0 	bl	8005944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba8:	f001 fbb8 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bac:	f000 fc76 	bl	800549c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bb0:	f001 fb82 	bl	80062b8 <vPortEnterCritical>
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d103      	bne.n	8004bca <xQueueSemaphoreTake+0x142>
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d103      	bne.n	8004be0 <xQueueSemaphoreTake+0x158>
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be0:	f001 fb9c 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004be4:	463a      	mov	r2, r7
 8004be6:	f107 030c 	add.w	r3, r7, #12
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 febf 	bl	8005970 <xTaskCheckForTimeOut>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d132      	bne.n	8004c5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bfa:	f000 f9d1 	bl	8004fa0 <prvIsQueueEmpty>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d026      	beq.n	8004c52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004c0c:	f001 fb54 	bl	80062b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 f815 	bl	8005c44 <xTaskPriorityInherit>
 8004c1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004c1c:	f001 fb7e 	bl	800631c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c22:	3324      	adds	r3, #36	@ 0x24
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fe01 	bl	8005830 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c30:	f000 f964 	bl	8004efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c34:	f000 fc40 	bl	80054b8 <xTaskResumeAll>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f47f af67 	bne.w	8004b0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004c40:	4b18      	ldr	r3, [pc, #96]	@ (8004ca4 <xQueueSemaphoreTake+0x21c>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	e75d      	b.n	8004b0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c54:	f000 f952 	bl	8004efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c58:	f000 fc2e 	bl	80054b8 <xTaskResumeAll>
 8004c5c:	e757      	b.n	8004b0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c60:	f000 f94c 	bl	8004efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c64:	f000 fc28 	bl	80054b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c6a:	f000 f999 	bl	8004fa0 <prvIsQueueEmpty>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f43f af4c 	beq.w	8004b0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004c7c:	f001 fb1c 	bl	80062b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c82:	f000 f893 	bl	8004dac <prvGetDisinheritPriorityAfterTimeout>
 8004c86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f8d6 	bl	8005e40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c94:	f001 fb42 	bl	800631c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3738      	adds	r7, #56	@ 0x38
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	@ 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	623b      	str	r3, [r7, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <xQueueReceiveFromISR+0x3c>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <xQueueReceiveFromISR+0x40>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <xQueueReceiveFromISR+0x42>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	61fb      	str	r3, [r7, #28]
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	e7fd      	b.n	8004d02 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d06:	f001 fbb7 	bl	8006478 <vPortValidateInterruptPriority>
	__asm volatile
 8004d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61ba      	str	r2, [r7, #24]
 8004d20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02f      	beq.n	8004d92 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d40:	f000 f8b6 	bl	8004eb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d112      	bne.n	8004d7c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	3310      	adds	r3, #16
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd8a 	bl	800587c <xTaskRemoveFromEventList>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e007      	b.n	8004d8c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d80:	3301      	adds	r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	b25a      	sxtb	r2, r3
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d90:	e001      	b.n	8004d96 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f383 8811 	msr	BASEPRI, r3
}
 8004da0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3738      	adds	r7, #56	@ 0x38
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1c3 0307 	rsb	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e001      	b.n	8004dce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004dce:	68fb      	ldr	r3, [r7, #12]
	}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10d      	bne.n	8004e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14d      	bne.n	8004e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 ff92 	bl	8005d30 <xTaskPriorityDisinherit>
 8004e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e043      	b.n	8004e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d119      	bne.n	8004e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6858      	ldr	r0, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	461a      	mov	r2, r3
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	f001 fdda 	bl	80069e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d32b      	bcc.n	8004e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e026      	b.n	8004e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68d8      	ldr	r0, [r3, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	f001 fdc0 	bl	80069e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	425b      	negs	r3, r3
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d207      	bcs.n	8004e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	425b      	negs	r3, r3
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d105      	bne.n	8004e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ea6:	697b      	ldr	r3, [r7, #20]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	441a      	add	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d303      	bcc.n	8004ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68d9      	ldr	r1, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	461a      	mov	r2, r3
 8004eee:	6838      	ldr	r0, [r7, #0]
 8004ef0:	f001 fd76 	bl	80069e0 <memcpy>
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f04:	f001 f9d8 	bl	80062b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f10:	e011      	b.n	8004f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3324      	adds	r3, #36	@ 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fcac 	bl	800587c <xTaskRemoveFromEventList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f2a:	f000 fd85 	bl	8005a38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dce9      	bgt.n	8004f12 <prvUnlockQueue+0x16>
 8004f3e:	e000      	b.n	8004f42 <prvUnlockQueue+0x46>
					break;
 8004f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	22ff      	movs	r2, #255	@ 0xff
 8004f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 f9e7 	bl	800631c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f4e:	f001 f9b3 	bl	80062b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f5a:	e011      	b.n	8004f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3310      	adds	r3, #16
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fc87 	bl	800587c <xTaskRemoveFromEventList>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f74:	f000 fd60 	bl	8005a38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dce9      	bgt.n	8004f5c <prvUnlockQueue+0x60>
 8004f88:	e000      	b.n	8004f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	22ff      	movs	r2, #255	@ 0xff
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f94:	f001 f9c2 	bl	800631c <vPortExitCritical>
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa8:	f001 f986 	bl	80062b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e001      	b.n	8004fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fbe:	f001 f9ad 	bl	800631c <vPortExitCritical>

	return xReturn;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd4:	f001 f970 	bl	80062b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d102      	bne.n	8004fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e001      	b.n	8004fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fee:	f001 f995 	bl	800631c <vPortExitCritical>

	return xReturn;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08e      	sub	sp, #56	@ 0x38
 8005000:	af04      	add	r7, sp, #16
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800500a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	623b      	str	r3, [r7, #32]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <xTaskCreateStatic+0x4a>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	61fb      	str	r3, [r7, #28]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005046:	23a0      	movs	r3, #160	@ 0xa0
 8005048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2ba0      	cmp	r3, #160	@ 0xa0
 800504e:	d00b      	beq.n	8005068 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61bb      	str	r3, [r7, #24]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005068:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01e      	beq.n	80050ae <xTaskCreateStatic+0xb2>
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01b      	beq.n	80050ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	2202      	movs	r2, #2
 8005084:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005088:	2300      	movs	r3, #0
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	9302      	str	r3, [sp, #8]
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f851 	bl	8005148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050a8:	f000 f8ee 	bl	8005288 <prvAddNewTaskToReadyList>
 80050ac:	e001      	b.n	80050b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050b2:	697b      	ldr	r3, [r7, #20]
	}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3728      	adds	r7, #40	@ 0x28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	@ 0x30
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fa13 	bl	80064fc <pvPortMalloc>
 80050d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050de:	20a0      	movs	r0, #160	@ 0xa0
 80050e0:	f001 fa0c 	bl	80064fc <pvPortMalloc>
 80050e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80050f2:	e005      	b.n	8005100 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050f4:	6978      	ldr	r0, [r7, #20]
 80050f6:	f001 facf 	bl	8006698 <vPortFree>
 80050fa:	e001      	b.n	8005100 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d017      	beq.n	8005136 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	2300      	movs	r3, #0
 8005112:	9303      	str	r3, [sp, #12]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	9302      	str	r3, [sp, #8]
 8005118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f80f 	bl	8005148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800512a:	69f8      	ldr	r0, [r7, #28]
 800512c:	f000 f8ac 	bl	8005288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005130:	2301      	movs	r3, #1
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e002      	b.n	800513c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800513c:	69bb      	ldr	r3, [r7, #24]
	}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005160:	3b01      	subs	r3, #1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	617b      	str	r3, [r7, #20]
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01f      	beq.n	80051d8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	e012      	b.n	80051c4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	7819      	ldrb	r1, [r3, #0]
 80051a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	3334      	adds	r3, #52	@ 0x34
 80051ae:	460a      	mov	r2, r1
 80051b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3301      	adds	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b0f      	cmp	r3, #15
 80051c8:	d9e9      	bls.n	800519e <prvInitialiseNewTask+0x56>
 80051ca:	e000      	b.n	80051ce <prvInitialiseNewTask+0x86>
			{
				break;
 80051cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051d6:	e003      	b.n	80051e0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d901      	bls.n	80051ea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051e6:	2306      	movs	r3, #6
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	2200      	movs	r2, #0
 80051fa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	3304      	adds	r3, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f8d9 	bl	80043b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	3318      	adds	r3, #24
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff f8d4 	bl	80043b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005214:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005218:	f1c3 0207 	rsb	r2, r3, #7
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	2200      	movs	r2, #0
 800522a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	2200      	movs	r2, #0
 8005232:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	334c      	adds	r3, #76	@ 0x4c
 800523a:	224c      	movs	r2, #76	@ 0x4c
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fb4a 	bl	80068d8 <memset>
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <prvInitialiseNewTask+0x134>)
 8005248:	651a      	str	r2, [r3, #80]	@ 0x50
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	4a0c      	ldr	r2, [pc, #48]	@ (8005280 <prvInitialiseNewTask+0x138>)
 800524e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	4a0c      	ldr	r2, [pc, #48]	@ (8005284 <prvInitialiseNewTask+0x13c>)
 8005254:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	69b8      	ldr	r0, [r7, #24]
 800525c:	f000 fefa 	bl	8006054 <pxPortInitialiseStack>
 8005260:	4602      	mov	r2, r0
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005272:	bf00      	nop
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20004218 	.word	0x20004218
 8005280:	20004280 	.word	0x20004280
 8005284:	200042e8 	.word	0x200042e8

08005288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005290:	f001 f812 	bl	80062b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005294:	4b2a      	ldr	r3, [pc, #168]	@ (8005340 <prvAddNewTaskToReadyList+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	4a29      	ldr	r2, [pc, #164]	@ (8005340 <prvAddNewTaskToReadyList+0xb8>)
 800529c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052a6:	4a27      	ldr	r2, [pc, #156]	@ (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052ac:	4b24      	ldr	r3, [pc, #144]	@ (8005340 <prvAddNewTaskToReadyList+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d110      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052b4:	f000 fbe4 	bl	8005a80 <prvInitialiseTaskLists>
 80052b8:	e00d      	b.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ba:	4b23      	ldr	r3, [pc, #140]	@ (8005348 <prvAddNewTaskToReadyList+0xc0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052c2:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d802      	bhi.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052d6:	4b1d      	ldr	r3, [pc, #116]	@ (800534c <prvAddNewTaskToReadyList+0xc4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <prvAddNewTaskToReadyList+0xc4>)
 80052de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	2201      	movs	r2, #1
 80052e6:	409a      	lsls	r2, r3
 80052e8:	4b19      	ldr	r3, [pc, #100]	@ (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	4a18      	ldr	r2, [pc, #96]	@ (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4a15      	ldr	r2, [pc, #84]	@ (8005354 <prvAddNewTaskToReadyList+0xcc>)
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7ff f862 	bl	80043d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800530e:	f001 f805 	bl	800631c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <prvAddNewTaskToReadyList+0xc0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00e      	beq.n	8005338 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800531a:	4b0a      	ldr	r3, [pc, #40]	@ (8005344 <prvAddNewTaskToReadyList+0xbc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d207      	bcs.n	8005338 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <prvAddNewTaskToReadyList+0xd0>)
 800532a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	200005c4 	.word	0x200005c4
 8005344:	200004c4 	.word	0x200004c4
 8005348:	200005d0 	.word	0x200005d0
 800534c:	200005e0 	.word	0x200005e0
 8005350:	200005cc 	.word	0x200005cc
 8005354:	200004c8 	.word	0x200004c8
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800536e:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <vTaskDelay+0x64>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <vTaskDelay+0x32>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60bb      	str	r3, [r7, #8]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800538e:	f000 f885 	bl	800549c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005392:	2100      	movs	r1, #0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fdf7 	bl	8005f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800539a:	f000 f88d 	bl	80054b8 <xTaskResumeAll>
 800539e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053a6:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <vTaskDelay+0x68>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200005ec 	.word	0x200005ec
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053d6:	463a      	mov	r2, r7
 80053d8:	1d39      	adds	r1, r7, #4
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fb fc8c 	bl	8000cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2300      	movs	r3, #0
 80053f4:	460a      	mov	r2, r1
 80053f6:	4921      	ldr	r1, [pc, #132]	@ (800547c <vTaskStartScheduler+0xb4>)
 80053f8:	4821      	ldr	r0, [pc, #132]	@ (8005480 <vTaskStartScheduler+0xb8>)
 80053fa:	f7ff fdff 	bl	8004ffc <xTaskCreateStatic>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a20      	ldr	r2, [pc, #128]	@ (8005484 <vTaskStartScheduler+0xbc>)
 8005402:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005404:	4b1f      	ldr	r3, [pc, #124]	@ (8005484 <vTaskStartScheduler+0xbc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800540c:	2301      	movs	r3, #1
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e001      	b.n	8005416 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d11b      	bne.n	8005454 <vTaskStartScheduler+0x8c>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	613b      	str	r3, [r7, #16]
}
 800542e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005430:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <vTaskStartScheduler+0xc0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	334c      	adds	r3, #76	@ 0x4c
 8005436:	4a15      	ldr	r2, [pc, #84]	@ (800548c <vTaskStartScheduler+0xc4>)
 8005438:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800543a:	4b15      	ldr	r3, [pc, #84]	@ (8005490 <vTaskStartScheduler+0xc8>)
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005442:	4b14      	ldr	r3, [pc, #80]	@ (8005494 <vTaskStartScheduler+0xcc>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005448:	4b13      	ldr	r3, [pc, #76]	@ (8005498 <vTaskStartScheduler+0xd0>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800544e:	f000 fe8f 	bl	8006170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005452:	e00f      	b.n	8005474 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d10b      	bne.n	8005474 <vTaskStartScheduler+0xac>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <vTaskStartScheduler+0xa8>
}
 8005474:	bf00      	nop
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	08006bd0 	.word	0x08006bd0
 8005480:	08005a51 	.word	0x08005a51
 8005484:	200005e8 	.word	0x200005e8
 8005488:	200004c4 	.word	0x200004c4
 800548c:	20000018 	.word	0x20000018
 8005490:	200005e4 	.word	0x200005e4
 8005494:	200005d0 	.word	0x200005d0
 8005498:	200005c8 	.word	0x200005c8

0800549c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <vTaskSuspendAll+0x18>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a03      	ldr	r2, [pc, #12]	@ (80054b4 <vTaskSuspendAll+0x18>)
 80054a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	200005ec 	.word	0x200005ec

080054b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054c6:	4b42      	ldr	r3, [pc, #264]	@ (80055d0 <xTaskResumeAll+0x118>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e6:	f000 fee7 	bl	80062b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <xTaskResumeAll+0x118>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4a37      	ldr	r2, [pc, #220]	@ (80055d0 <xTaskResumeAll+0x118>)
 80054f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f4:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <xTaskResumeAll+0x118>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d161      	bne.n	80055c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054fc:	4b35      	ldr	r3, [pc, #212]	@ (80055d4 <xTaskResumeAll+0x11c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05d      	beq.n	80055c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005504:	e02e      	b.n	8005564 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005506:	4b34      	ldr	r3, [pc, #208]	@ (80055d8 <xTaskResumeAll+0x120>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3318      	adds	r3, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe ffba 	bl	800448c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe ffb5 	bl	800448c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <xTaskResumeAll+0x124>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	4a2a      	ldr	r2, [pc, #168]	@ (80055dc <xTaskResumeAll+0x124>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a27      	ldr	r2, [pc, #156]	@ (80055e0 <xTaskResumeAll+0x128>)
 8005542:	441a      	add	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe ff41 	bl	80043d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005554:	4b23      	ldr	r3, [pc, #140]	@ (80055e4 <xTaskResumeAll+0x12c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800555e:	4b22      	ldr	r3, [pc, #136]	@ (80055e8 <xTaskResumeAll+0x130>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005564:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <xTaskResumeAll+0x120>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1cc      	bne.n	8005506 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005572:	f000 fb29 	bl	8005bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005576:	4b1d      	ldr	r3, [pc, #116]	@ (80055ec <xTaskResumeAll+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d010      	beq.n	80055a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005582:	f000 f837 	bl	80055f4 <xTaskIncrementTick>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800558c:	4b16      	ldr	r3, [pc, #88]	@ (80055e8 <xTaskResumeAll+0x130>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3b01      	subs	r3, #1
 8005596:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f1      	bne.n	8005582 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800559e:	4b13      	ldr	r3, [pc, #76]	@ (80055ec <xTaskResumeAll+0x134>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a4:	4b10      	ldr	r3, [pc, #64]	@ (80055e8 <xTaskResumeAll+0x130>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055b0:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <xTaskResumeAll+0x138>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c0:	f000 feac 	bl	800631c <vPortExitCritical>

	return xAlreadyYielded;
 80055c4:	68bb      	ldr	r3, [r7, #8]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200005ec 	.word	0x200005ec
 80055d4:	200005c4 	.word	0x200005c4
 80055d8:	20000584 	.word	0x20000584
 80055dc:	200005cc 	.word	0x200005cc
 80055e0:	200004c8 	.word	0x200004c8
 80055e4:	200004c4 	.word	0x200004c4
 80055e8:	200005d8 	.word	0x200005d8
 80055ec:	200005d4 	.word	0x200005d4
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fe:	4b4f      	ldr	r3, [pc, #316]	@ (800573c <xTaskIncrementTick+0x148>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 808f 	bne.w	8005726 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005608:	4b4d      	ldr	r3, [pc, #308]	@ (8005740 <xTaskIncrementTick+0x14c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005610:	4a4b      	ldr	r2, [pc, #300]	@ (8005740 <xTaskIncrementTick+0x14c>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d121      	bne.n	8005660 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800561c:	4b49      	ldr	r3, [pc, #292]	@ (8005744 <xTaskIncrementTick+0x150>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	603b      	str	r3, [r7, #0]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <xTaskIncrementTick+0x46>
 800563e:	4b41      	ldr	r3, [pc, #260]	@ (8005744 <xTaskIncrementTick+0x150>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	4b40      	ldr	r3, [pc, #256]	@ (8005748 <xTaskIncrementTick+0x154>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a3e      	ldr	r2, [pc, #248]	@ (8005744 <xTaskIncrementTick+0x150>)
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4a3e      	ldr	r2, [pc, #248]	@ (8005748 <xTaskIncrementTick+0x154>)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b3e      	ldr	r3, [pc, #248]	@ (800574c <xTaskIncrementTick+0x158>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a3c      	ldr	r2, [pc, #240]	@ (800574c <xTaskIncrementTick+0x158>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	f000 fab4 	bl	8005bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005660:	4b3b      	ldr	r3, [pc, #236]	@ (8005750 <xTaskIncrementTick+0x15c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d348      	bcc.n	80056fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800566a:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <xTaskIncrementTick+0x150>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005674:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <xTaskIncrementTick+0x15c>)
 8005676:	f04f 32ff 	mov.w	r2, #4294967295
 800567a:	601a      	str	r2, [r3, #0]
					break;
 800567c:	e03e      	b.n	80056fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567e:	4b31      	ldr	r3, [pc, #196]	@ (8005744 <xTaskIncrementTick+0x150>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d203      	bcs.n	800569e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005696:	4a2e      	ldr	r2, [pc, #184]	@ (8005750 <xTaskIncrementTick+0x15c>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800569c:	e02e      	b.n	80056fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fef2 	bl	800448c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	3318      	adds	r3, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe fee9 	bl	800448c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	2201      	movs	r2, #1
 80056c0:	409a      	lsls	r2, r3
 80056c2:	4b24      	ldr	r3, [pc, #144]	@ (8005754 <xTaskIncrementTick+0x160>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	4a22      	ldr	r2, [pc, #136]	@ (8005754 <xTaskIncrementTick+0x160>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <xTaskIncrementTick+0x164>)
 80056da:	441a      	add	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fe fe75 	bl	80043d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <xTaskIncrementTick+0x168>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d3b9      	bcc.n	800566a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056fa:	e7b6      	b.n	800566a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056fc:	4b17      	ldr	r3, [pc, #92]	@ (800575c <xTaskIncrementTick+0x168>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005702:	4915      	ldr	r1, [pc, #84]	@ (8005758 <xTaskIncrementTick+0x164>)
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d901      	bls.n	8005718 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005718:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <xTaskIncrementTick+0x16c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d007      	beq.n	8005730 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	e004      	b.n	8005730 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <xTaskIncrementTick+0x170>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3301      	adds	r3, #1
 800572c:	4a0d      	ldr	r2, [pc, #52]	@ (8005764 <xTaskIncrementTick+0x170>)
 800572e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005730:	697b      	ldr	r3, [r7, #20]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200005ec 	.word	0x200005ec
 8005740:	200005c8 	.word	0x200005c8
 8005744:	2000057c 	.word	0x2000057c
 8005748:	20000580 	.word	0x20000580
 800574c:	200005dc 	.word	0x200005dc
 8005750:	200005e4 	.word	0x200005e4
 8005754:	200005cc 	.word	0x200005cc
 8005758:	200004c8 	.word	0x200004c8
 800575c:	200004c4 	.word	0x200004c4
 8005760:	200005d8 	.word	0x200005d8
 8005764:	200005d4 	.word	0x200005d4

08005768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800576e:	4b2a      	ldr	r3, [pc, #168]	@ (8005818 <vTaskSwitchContext+0xb0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005776:	4b29      	ldr	r3, [pc, #164]	@ (800581c <vTaskSwitchContext+0xb4>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800577c:	e045      	b.n	800580a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800577e:	4b27      	ldr	r3, [pc, #156]	@ (800581c <vTaskSwitchContext+0xb4>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005784:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <vTaskSwitchContext+0xb8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	fab3 f383 	clz	r3, r3
 8005790:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	f1c3 031f 	rsb	r3, r3, #31
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	4922      	ldr	r1, [pc, #136]	@ (8005824 <vTaskSwitchContext+0xbc>)
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	607b      	str	r3, [r7, #4]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <vTaskSwitchContext+0x5a>
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a14      	ldr	r2, [pc, #80]	@ (8005824 <vTaskSwitchContext+0xbc>)
 80057d2:	4413      	add	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3308      	adds	r3, #8
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d104      	bne.n	80057f6 <vTaskSwitchContext+0x8e>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005828 <vTaskSwitchContext+0xc0>)
 80057fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005800:	4b09      	ldr	r3, [pc, #36]	@ (8005828 <vTaskSwitchContext+0xc0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	334c      	adds	r3, #76	@ 0x4c
 8005806:	4a09      	ldr	r2, [pc, #36]	@ (800582c <vTaskSwitchContext+0xc4>)
 8005808:	6013      	str	r3, [r2, #0]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	200005ec 	.word	0x200005ec
 800581c:	200005d8 	.word	0x200005d8
 8005820:	200005cc 	.word	0x200005cc
 8005824:	200004c8 	.word	0x200004c8
 8005828:	200004c4 	.word	0x200004c4
 800582c:	20000018 	.word	0x20000018

08005830 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005858:	4b07      	ldr	r3, [pc, #28]	@ (8005878 <vTaskPlaceOnEventList+0x48>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3318      	adds	r3, #24
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7fe fdda 	bl	800441a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005866:	2101      	movs	r1, #1
 8005868:	6838      	ldr	r0, [r7, #0]
 800586a:	f000 fb8d 	bl	8005f88 <prvAddCurrentTaskToDelayedList>
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200004c4 	.word	0x200004c4

0800587c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60fb      	str	r3, [r7, #12]
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	e7fd      	b.n	80058a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3318      	adds	r3, #24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fdec 	bl	800448c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b4:	4b1d      	ldr	r3, [pc, #116]	@ (800592c <xTaskRemoveFromEventList+0xb0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11c      	bne.n	80058f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	3304      	adds	r3, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe fde3 	bl	800448c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	2201      	movs	r2, #1
 80058cc:	409a      	lsls	r2, r3
 80058ce:	4b18      	ldr	r3, [pc, #96]	@ (8005930 <xTaskRemoveFromEventList+0xb4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	4a16      	ldr	r2, [pc, #88]	@ (8005930 <xTaskRemoveFromEventList+0xb4>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4a13      	ldr	r2, [pc, #76]	@ (8005934 <xTaskRemoveFromEventList+0xb8>)
 80058e6:	441a      	add	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7fe fd6f 	bl	80043d2 <vListInsertEnd>
 80058f4:	e005      	b.n	8005902 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3318      	adds	r3, #24
 80058fa:	4619      	mov	r1, r3
 80058fc:	480e      	ldr	r0, [pc, #56]	@ (8005938 <xTaskRemoveFromEventList+0xbc>)
 80058fe:	f7fe fd68 	bl	80043d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <xTaskRemoveFromEventList+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d905      	bls.n	800591c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <xTaskRemoveFromEventList+0xc4>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e001      	b.n	8005920 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005920:	697b      	ldr	r3, [r7, #20]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200005ec 	.word	0x200005ec
 8005930:	200005cc 	.word	0x200005cc
 8005934:	200004c8 	.word	0x200004c8
 8005938:	20000584 	.word	0x20000584
 800593c:	200004c4 	.word	0x200004c4
 8005940:	200005d8 	.word	0x200005d8

08005944 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800594c:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <vTaskInternalSetTimeOutState+0x24>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005954:	4b05      	ldr	r3, [pc, #20]	@ (800596c <vTaskInternalSetTimeOutState+0x28>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	605a      	str	r2, [r3, #4]
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	200005dc 	.word	0x200005dc
 800596c:	200005c8 	.word	0x200005c8

08005970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	613b      	str	r3, [r7, #16]
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	60fb      	str	r3, [r7, #12]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059b6:	f000 fc7f 	bl	80062b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005a30 <xTaskCheckForTimeOut+0xc0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d102      	bne.n	80059da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e023      	b.n	8005a22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b15      	ldr	r3, [pc, #84]	@ (8005a34 <xTaskCheckForTimeOut+0xc4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d007      	beq.n	80059f6 <xTaskCheckForTimeOut+0x86>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d302      	bcc.n	80059f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	e015      	b.n	8005a22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d20b      	bcs.n	8005a18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff99 	bl	8005944 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	e004      	b.n	8005a22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a22:	f000 fc7b 	bl	800631c <vPortExitCritical>

	return xReturn;
 8005a26:	69fb      	ldr	r3, [r7, #28]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200005c8 	.word	0x200005c8
 8005a34:	200005dc 	.word	0x200005dc

08005a38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	@ (8005a4c <vTaskMissedYield+0x14>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	200005d8 	.word	0x200005d8

08005a50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a58:	f000 f852 	bl	8005b00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <prvIdleTask+0x28>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d9f9      	bls.n	8005a58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <prvIdleTask+0x2c>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a74:	e7f0      	b.n	8005a58 <prvIdleTask+0x8>
 8005a76:	bf00      	nop
 8005a78:	200004c8 	.word	0x200004c8
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a86:	2300      	movs	r3, #0
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	e00c      	b.n	8005aa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a12      	ldr	r2, [pc, #72]	@ (8005ae0 <prvInitialiseTaskLists+0x60>)
 8005a98:	4413      	add	r3, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fc6c 	bl	8004378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b06      	cmp	r3, #6
 8005aaa:	d9ef      	bls.n	8005a8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005aac:	480d      	ldr	r0, [pc, #52]	@ (8005ae4 <prvInitialiseTaskLists+0x64>)
 8005aae:	f7fe fc63 	bl	8004378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ab2:	480d      	ldr	r0, [pc, #52]	@ (8005ae8 <prvInitialiseTaskLists+0x68>)
 8005ab4:	f7fe fc60 	bl	8004378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ab8:	480c      	ldr	r0, [pc, #48]	@ (8005aec <prvInitialiseTaskLists+0x6c>)
 8005aba:	f7fe fc5d 	bl	8004378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005abe:	480c      	ldr	r0, [pc, #48]	@ (8005af0 <prvInitialiseTaskLists+0x70>)
 8005ac0:	f7fe fc5a 	bl	8004378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ac4:	480b      	ldr	r0, [pc, #44]	@ (8005af4 <prvInitialiseTaskLists+0x74>)
 8005ac6:	f7fe fc57 	bl	8004378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <prvInitialiseTaskLists+0x78>)
 8005acc:	4a05      	ldr	r2, [pc, #20]	@ (8005ae4 <prvInitialiseTaskLists+0x64>)
 8005ace:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <prvInitialiseTaskLists+0x7c>)
 8005ad2:	4a05      	ldr	r2, [pc, #20]	@ (8005ae8 <prvInitialiseTaskLists+0x68>)
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	200004c8 	.word	0x200004c8
 8005ae4:	20000554 	.word	0x20000554
 8005ae8:	20000568 	.word	0x20000568
 8005aec:	20000584 	.word	0x20000584
 8005af0:	20000598 	.word	0x20000598
 8005af4:	200005b0 	.word	0x200005b0
 8005af8:	2000057c 	.word	0x2000057c
 8005afc:	20000580 	.word	0x20000580

08005b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b06:	e019      	b.n	8005b3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b08:	f000 fbd6 	bl	80062b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <prvCheckTasksWaitingTermination+0x50>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe fcb7 	bl	800448c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <prvCheckTasksWaitingTermination+0x54>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	4a0b      	ldr	r2, [pc, #44]	@ (8005b54 <prvCheckTasksWaitingTermination+0x54>)
 8005b26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b28:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <prvCheckTasksWaitingTermination+0x58>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b58 <prvCheckTasksWaitingTermination+0x58>)
 8005b30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b32:	f000 fbf3 	bl	800631c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f810 	bl	8005b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <prvCheckTasksWaitingTermination+0x58>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e1      	bne.n	8005b08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000598 	.word	0x20000598
 8005b54:	200005c4 	.word	0x200005c4
 8005b58:	200005ac 	.word	0x200005ac

08005b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	334c      	adds	r3, #76	@ 0x4c
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 febd 	bl	80068e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d108      	bne.n	8005b8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fd8b 	bl	8006698 <vPortFree>
				vPortFree( pxTCB );
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fd88 	bl	8006698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b88:	e019      	b.n	8005bbe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d103      	bne.n	8005b9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fd7f 	bl	8006698 <vPortFree>
	}
 8005b9a:	e010      	b.n	8005bbe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d00b      	beq.n	8005bbe <prvDeleteTCB+0x62>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	60fb      	str	r3, [r7, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	e7fd      	b.n	8005bba <prvDeleteTCB+0x5e>
	}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <prvResetNextTaskUnblockTime+0x38>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c04 <prvResetNextTaskUnblockTime+0x3c>)
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be0:	e008      	b.n	8005bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be2:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <prvResetNextTaskUnblockTime+0x38>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	@ (8005c04 <prvResetNextTaskUnblockTime+0x3c>)
 8005bf2:	6013      	str	r3, [r2, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	2000057c 	.word	0x2000057c
 8005c04:	200005e4 	.word	0x200005e4

08005c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <xTaskGetSchedulerState+0x34>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c16:	2301      	movs	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	e008      	b.n	8005c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1c:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <xTaskGetSchedulerState+0x38>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c24:	2302      	movs	r3, #2
 8005c26:	607b      	str	r3, [r7, #4]
 8005c28:	e001      	b.n	8005c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c2e:	687b      	ldr	r3, [r7, #4]
	}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	200005d0 	.word	0x200005d0
 8005c40:	200005ec 	.word	0x200005ec

08005c44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d05e      	beq.n	8005d18 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c5e:	4b31      	ldr	r3, [pc, #196]	@ (8005d24 <xTaskPriorityInherit+0xe0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d24e      	bcs.n	8005d06 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	db06      	blt.n	8005c7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c70:	4b2c      	ldr	r3, [pc, #176]	@ (8005d24 <xTaskPriorityInherit+0xe0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	f1c3 0207 	rsb	r2, r3, #7
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6959      	ldr	r1, [r3, #20]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a26      	ldr	r2, [pc, #152]	@ (8005d28 <xTaskPriorityInherit+0xe4>)
 8005c90:	4413      	add	r3, r2
 8005c92:	4299      	cmp	r1, r3
 8005c94:	d12f      	bne.n	8005cf6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fbf6 	bl	800448c <uxListRemove>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43da      	mvns	r2, r3
 8005cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d2c <xTaskPriorityInherit+0xe8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <xTaskPriorityInherit+0xe8>)
 8005cba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cbc:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <xTaskPriorityInherit+0xe0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	2201      	movs	r2, #1
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	4b17      	ldr	r3, [pc, #92]	@ (8005d2c <xTaskPriorityInherit+0xe8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <xTaskPriorityInherit+0xe8>)
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4a10      	ldr	r2, [pc, #64]	@ (8005d28 <xTaskPriorityInherit+0xe4>)
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fe fb6f 	bl	80043d2 <vListInsertEnd>
 8005cf4:	e004      	b.n	8005d00 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d24 <xTaskPriorityInherit+0xe0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e008      	b.n	8005d18 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d0a:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <xTaskPriorityInherit+0xe0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d201      	bcs.n	8005d18 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d18:	68fb      	ldr	r3, [r7, #12]
	}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200004c4 	.word	0x200004c4
 8005d28:	200004c8 	.word	0x200004c8
 8005d2c:	200005cc 	.word	0x200005cc

08005d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d070      	beq.n	8005e28 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d46:	4b3b      	ldr	r3, [pc, #236]	@ (8005e34 <xTaskPriorityDisinherit+0x104>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d00b      	beq.n	8005d68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60bb      	str	r3, [r7, #8]
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d044      	beq.n	8005e28 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d140      	bne.n	8005e28 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fb6e 	bl	800448c <uxListRemove>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d115      	bne.n	8005de2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dba:	491f      	ldr	r1, [pc, #124]	@ (8005e38 <xTaskPriorityDisinherit+0x108>)
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xTaskPriorityDisinherit+0xb2>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <xTaskPriorityDisinherit+0x10c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	4a17      	ldr	r2, [pc, #92]	@ (8005e3c <xTaskPriorityDisinherit+0x10c>)
 8005de0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	f1c3 0207 	rsb	r2, r3, #7
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <xTaskPriorityDisinherit+0x10c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	4a0d      	ldr	r2, [pc, #52]	@ (8005e3c <xTaskPriorityDisinherit+0x10c>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4a08      	ldr	r2, [pc, #32]	@ (8005e38 <xTaskPriorityDisinherit+0x108>)
 8005e16:	441a      	add	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fe fad7 	bl	80043d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e28:	697b      	ldr	r3, [r7, #20]
	}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200004c4 	.word	0x200004c4
 8005e38:	200004c8 	.word	0x200004c8
 8005e3c:	200005cc 	.word	0x200005cc

08005e40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d079      	beq.n	8005f4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60fb      	str	r3, [r7, #12]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d902      	bls.n	8005e88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	e002      	b.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d059      	beq.n	8005f4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d154      	bne.n	8005f4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8005f54 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d10b      	bne.n	8005ec4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60bb      	str	r3, [r7, #8]
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	db04      	blt.n	8005ee2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f1c3 0207 	rsb	r2, r3, #7
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	6959      	ldr	r1, [r3, #20]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4a19      	ldr	r2, [pc, #100]	@ (8005f58 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ef2:	4413      	add	r3, r2
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	d129      	bne.n	8005f4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe fac5 	bl	800448c <uxListRemove>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43da      	mvns	r2, r3
 8005f14:	4b11      	ldr	r3, [pc, #68]	@ (8005f5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	4a10      	ldr	r2, [pc, #64]	@ (8005f5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f22:	2201      	movs	r2, #1
 8005f24:	409a      	lsls	r2, r3
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4a06      	ldr	r2, [pc, #24]	@ (8005f58 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f3e:	441a      	add	r2, r3
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f7fe fa43 	bl	80043d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f4c:	bf00      	nop
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200004c4 	.word	0x200004c4
 8005f58:	200004c8 	.word	0x200004c8
 8005f5c:	200005cc 	.word	0x200005cc

08005f60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f64:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f72:	3201      	adds	r2, #1
 8005f74:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005f76:	4b03      	ldr	r3, [pc, #12]	@ (8005f84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f78:	681b      	ldr	r3, [r3, #0]
	}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	200004c4 	.word	0x200004c4

08005f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f92:	4b29      	ldr	r3, [pc, #164]	@ (8006038 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f98:	4b28      	ldr	r3, [pc, #160]	@ (800603c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fa74 	bl	800448c <uxListRemove>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005faa:	4b24      	ldr	r3, [pc, #144]	@ (800603c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43da      	mvns	r2, r3
 8005fb8:	4b21      	ldr	r3, [pc, #132]	@ (8006040 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	4a20      	ldr	r2, [pc, #128]	@ (8006040 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d10a      	bne.n	8005fe0 <prvAddCurrentTaskToDelayedList+0x58>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800603c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	481a      	ldr	r0, [pc, #104]	@ (8006044 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005fda:	f7fe f9fa 	bl	80043d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fde:	e026      	b.n	800602e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fe8:	4b14      	ldr	r3, [pc, #80]	@ (800603c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d209      	bcs.n	800600c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ff8:	4b13      	ldr	r3, [pc, #76]	@ (8006048 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800603c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f7fe fa08 	bl	800441a <vListInsert>
}
 800600a:	e010      	b.n	800602e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600c:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <prvAddCurrentTaskToDelayedList+0xc4>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fe f9fe 	bl	800441a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d202      	bcs.n	800602e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006028:	4a09      	ldr	r2, [pc, #36]	@ (8006050 <prvAddCurrentTaskToDelayedList+0xc8>)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6013      	str	r3, [r2, #0]
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200005c8 	.word	0x200005c8
 800603c:	200004c4 	.word	0x200004c4
 8006040:	200005cc 	.word	0x200005cc
 8006044:	200005b0 	.word	0x200005b0
 8006048:	20000580 	.word	0x20000580
 800604c:	2000057c 	.word	0x2000057c
 8006050:	200005e4 	.word	0x200005e4

08006054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b04      	subs	r3, #4
 8006064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800606c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3b04      	subs	r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b04      	subs	r3, #4
 8006082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006084:	4a0c      	ldr	r2, [pc, #48]	@ (80060b8 <pxPortInitialiseStack+0x64>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b14      	subs	r3, #20
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b04      	subs	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f06f 0202 	mvn.w	r2, #2
 80060a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b20      	subs	r3, #32
 80060a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	080060bd 	.word	0x080060bd

080060bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060c6:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <prvTaskExitError+0x58>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d00b      	beq.n	80060e8 <prvTaskExitError+0x2c>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <prvTaskExitError+0x28>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60bb      	str	r3, [r7, #8]
}
 80060fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060fc:	bf00      	nop
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0fc      	beq.n	80060fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000014 	.word	0x20000014
	...

08006120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <pxCurrentTCBConst2>)
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	6808      	ldr	r0, [r1, #0]
 8006126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	f380 8809 	msr	PSP, r0
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f380 8811 	msr	BASEPRI, r0
 800613a:	4770      	bx	lr
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst2>:
 8006140:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006148:	4808      	ldr	r0, [pc, #32]	@ (800616c <prvPortStartFirstTask+0x24>)
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f380 8808 	msr	MSP, r0
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8814 	msr	CONTROL, r0
 800615a:	b662      	cpsie	i
 800615c:	b661      	cpsie	f
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	df00      	svc	0
 8006168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800616a:	bf00      	nop
 800616c:	e000ed08 	.word	0xe000ed08

08006170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006176:	4b47      	ldr	r3, [pc, #284]	@ (8006294 <xPortStartScheduler+0x124>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a47      	ldr	r2, [pc, #284]	@ (8006298 <xPortStartScheduler+0x128>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10b      	bne.n	8006198 <xPortStartScheduler+0x28>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	613b      	str	r3, [r7, #16]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006198:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <xPortStartScheduler+0x124>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3f      	ldr	r2, [pc, #252]	@ (800629c <xPortStartScheduler+0x12c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d10b      	bne.n	80061ba <xPortStartScheduler+0x4a>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	60fb      	str	r3, [r7, #12]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ba:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <xPortStartScheduler+0x130>)
 80061bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	22ff      	movs	r2, #255	@ 0xff
 80061ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	4b31      	ldr	r3, [pc, #196]	@ (80062a4 <xPortStartScheduler+0x134>)
 80061e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061e2:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <xPortStartScheduler+0x138>)
 80061e4:	2207      	movs	r2, #7
 80061e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061e8:	e009      	b.n	80061fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80061ea:	4b2f      	ldr	r3, [pc, #188]	@ (80062a8 <xPortStartScheduler+0x138>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	4a2d      	ldr	r2, [pc, #180]	@ (80062a8 <xPortStartScheduler+0x138>)
 80061f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b80      	cmp	r3, #128	@ 0x80
 8006208:	d0ef      	beq.n	80061ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800620a:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <xPortStartScheduler+0x138>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1c3 0307 	rsb	r3, r3, #7
 8006212:	2b04      	cmp	r3, #4
 8006214:	d00b      	beq.n	800622e <xPortStartScheduler+0xbe>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60bb      	str	r3, [r7, #8]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800622e:	4b1e      	ldr	r3, [pc, #120]	@ (80062a8 <xPortStartScheduler+0x138>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <xPortStartScheduler+0x138>)
 8006236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <xPortStartScheduler+0x138>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006240:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <xPortStartScheduler+0x138>)
 8006242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800624c:	4b17      	ldr	r3, [pc, #92]	@ (80062ac <xPortStartScheduler+0x13c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <xPortStartScheduler+0x13c>)
 8006252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006258:	4b14      	ldr	r3, [pc, #80]	@ (80062ac <xPortStartScheduler+0x13c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a13      	ldr	r2, [pc, #76]	@ (80062ac <xPortStartScheduler+0x13c>)
 800625e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006264:	f000 f8da 	bl	800641c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006268:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <xPortStartScheduler+0x140>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800626e:	f000 f8f9 	bl	8006464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006272:	4b10      	ldr	r3, [pc, #64]	@ (80062b4 <xPortStartScheduler+0x144>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a0f      	ldr	r2, [pc, #60]	@ (80062b4 <xPortStartScheduler+0x144>)
 8006278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800627c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800627e:	f7ff ff63 	bl	8006148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006282:	f7ff fa71 	bl	8005768 <vTaskSwitchContext>
	prvTaskExitError();
 8006286:	f7ff ff19 	bl	80060bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	e000ed00 	.word	0xe000ed00
 8006298:	410fc271 	.word	0x410fc271
 800629c:	410fc270 	.word	0x410fc270
 80062a0:	e000e400 	.word	0xe000e400
 80062a4:	200005f0 	.word	0x200005f0
 80062a8:	200005f4 	.word	0x200005f4
 80062ac:	e000ed20 	.word	0xe000ed20
 80062b0:	20000014 	.word	0x20000014
 80062b4:	e000ef34 	.word	0xe000ef34

080062b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062d2:	4b10      	ldr	r3, [pc, #64]	@ (8006314 <vPortEnterCritical+0x5c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006314 <vPortEnterCritical+0x5c>)
 80062da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <vPortEnterCritical+0x5c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d110      	bne.n	8006306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006318 <vPortEnterCritical+0x60>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <vPortEnterCritical+0x4e>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	603b      	str	r3, [r7, #0]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <vPortEnterCritical+0x4a>
	}
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000014 	.word	0x20000014
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006322:	4b12      	ldr	r3, [pc, #72]	@ (800636c <vPortExitCritical+0x50>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vPortExitCritical+0x26>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	607b      	str	r3, [r7, #4]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a08      	ldr	r2, [pc, #32]	@ (800636c <vPortExitCritical+0x50>)
 800634a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <vPortExitCritical+0x50>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <vPortExitCritical+0x44>
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	20000014 	.word	0x20000014

08006370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006370:	f3ef 8009 	mrs	r0, PSP
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4b15      	ldr	r3, [pc, #84]	@ (80063d0 <pxCurrentTCBConst>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f01e 0f10 	tst.w	lr, #16
 8006380:	bf08      	it	eq
 8006382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006394:	f380 8811 	msr	BASEPRI, r0
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f7ff f9e2 	bl	8005768 <vTaskSwitchContext>
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	f380 8811 	msr	BASEPRI, r0
 80063ac:	bc09      	pop	{r0, r3}
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	6808      	ldr	r0, [r1, #0]
 80063b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b6:	f01e 0f10 	tst.w	lr, #16
 80063ba:	bf08      	it	eq
 80063bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063c0:	f380 8809 	msr	PSP, r0
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst>:
 80063d0:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f7ff f8ff 	bl	80055f4 <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fc:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <xPortSysTickHandler+0x40>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <vPortSetupTimerInterrupt+0x38>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <vPortSetupTimerInterrupt+0x40>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a09      	ldr	r2, [pc, #36]	@ (8006460 <vPortSetupTimerInterrupt+0x44>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b04      	ldr	r3, [pc, #16]	@ (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010
 8006454:	e000e018 	.word	0xe000e018
 8006458:	20000008 	.word	0x20000008
 800645c:	10624dd3 	.word	0x10624dd3
 8006460:	e000e014 	.word	0xe000e014

08006464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006474 <vPortEnableVFP+0x10>
 8006468:	6801      	ldr	r1, [r0, #0]
 800646a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800646e:	6001      	str	r1, [r0, #0]
 8006470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006472:	bf00      	nop
 8006474:	e000ed88 	.word	0xe000ed88

08006478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800647e:	f3ef 8305 	mrs	r3, IPSR
 8006482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d915      	bls.n	80064b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800648a:	4a18      	ldr	r2, [pc, #96]	@ (80064ec <vPortValidateInterruptPriority+0x74>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006494:	4b16      	ldr	r3, [pc, #88]	@ (80064f0 <vPortValidateInterruptPriority+0x78>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	429a      	cmp	r2, r3
 800649c:	d20b      	bcs.n	80064b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b6:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <vPortValidateInterruptPriority+0x7c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064be:	4b0e      	ldr	r3, [pc, #56]	@ (80064f8 <vPortValidateInterruptPriority+0x80>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d90b      	bls.n	80064de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <vPortValidateInterruptPriority+0x62>
	}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000e3f0 	.word	0xe000e3f0
 80064f0:	200005f0 	.word	0x200005f0
 80064f4:	e000ed0c 	.word	0xe000ed0c
 80064f8:	200005f4 	.word	0x200005f4

080064fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006508:	f7fe ffc8 	bl	800549c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800650c:	4b5c      	ldr	r3, [pc, #368]	@ (8006680 <pvPortMalloc+0x184>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006514:	f000 f924 	bl	8006760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006518:	4b5a      	ldr	r3, [pc, #360]	@ (8006684 <pvPortMalloc+0x188>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8095 	bne.w	8006650 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800652c:	2208      	movs	r2, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d015      	beq.n	800656a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f023 0307 	bic.w	r3, r3, #7
 8006544:	3308      	adds	r3, #8
 8006546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <pvPortMalloc+0x6e>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	617b      	str	r3, [r7, #20]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d06f      	beq.n	8006650 <pvPortMalloc+0x154>
 8006570:	4b45      	ldr	r3, [pc, #276]	@ (8006688 <pvPortMalloc+0x18c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d86a      	bhi.n	8006650 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800657a:	4b44      	ldr	r3, [pc, #272]	@ (800668c <pvPortMalloc+0x190>)
 800657c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800657e:	4b43      	ldr	r3, [pc, #268]	@ (800668c <pvPortMalloc+0x190>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006584:	e004      	b.n	8006590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d903      	bls.n	80065a2 <pvPortMalloc+0xa6>
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f1      	bne.n	8006586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <pvPortMalloc+0x184>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d051      	beq.n	8006650 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	4413      	add	r3, r2
 80065b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	2308      	movs	r3, #8
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d920      	bls.n	8006610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <pvPortMalloc+0xfc>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800660a:	69b8      	ldr	r0, [r7, #24]
 800660c:	f000 f90a 	bl	8006824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006610:	4b1d      	ldr	r3, [pc, #116]	@ (8006688 <pvPortMalloc+0x18c>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <pvPortMalloc+0x18c>)
 800661c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800661e:	4b1a      	ldr	r3, [pc, #104]	@ (8006688 <pvPortMalloc+0x18c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b1b      	ldr	r3, [pc, #108]	@ (8006690 <pvPortMalloc+0x194>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d203      	bcs.n	8006632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800662a:	4b17      	ldr	r3, [pc, #92]	@ (8006688 <pvPortMalloc+0x18c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <pvPortMalloc+0x194>)
 8006630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b13      	ldr	r3, [pc, #76]	@ (8006684 <pvPortMalloc+0x188>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	431a      	orrs	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006646:	4b13      	ldr	r3, [pc, #76]	@ (8006694 <pvPortMalloc+0x198>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <pvPortMalloc+0x198>)
 800664e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006650:	f7fe ff32 	bl	80054b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <pvPortMalloc+0x17a>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60fb      	str	r3, [r7, #12]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <pvPortMalloc+0x176>
	return pvReturn;
 8006676:	69fb      	ldr	r3, [r7, #28]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3728      	adds	r7, #40	@ 0x28
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20004200 	.word	0x20004200
 8006684:	20004214 	.word	0x20004214
 8006688:	20004204 	.word	0x20004204
 800668c:	200041f8 	.word	0x200041f8
 8006690:	20004208 	.word	0x20004208
 8006694:	2000420c 	.word	0x2000420c

08006698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d04f      	beq.n	800674a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066aa:	2308      	movs	r3, #8
 80066ac:	425b      	negs	r3, r3
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4b25      	ldr	r3, [pc, #148]	@ (8006754 <vPortFree+0xbc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <vPortFree+0x46>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60fb      	str	r3, [r7, #12]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <vPortFree+0x66>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	4b14      	ldr	r3, [pc, #80]	@ (8006754 <vPortFree+0xbc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01e      	beq.n	800674a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11a      	bne.n	800674a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	4b0e      	ldr	r3, [pc, #56]	@ (8006754 <vPortFree+0xbc>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006724:	f7fe feba 	bl	800549c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <vPortFree+0xc0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4413      	add	r3, r2
 8006732:	4a09      	ldr	r2, [pc, #36]	@ (8006758 <vPortFree+0xc0>)
 8006734:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006736:	6938      	ldr	r0, [r7, #16]
 8006738:	f000 f874 	bl	8006824 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800673c:	4b07      	ldr	r3, [pc, #28]	@ (800675c <vPortFree+0xc4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a06      	ldr	r2, [pc, #24]	@ (800675c <vPortFree+0xc4>)
 8006744:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006746:	f7fe feb7 	bl	80054b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800674a:	bf00      	nop
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20004214 	.word	0x20004214
 8006758:	20004204 	.word	0x20004204
 800675c:	20004210 	.word	0x20004210

08006760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006766:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800676a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800676c:	4b27      	ldr	r3, [pc, #156]	@ (800680c <prvHeapInit+0xac>)
 800676e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3307      	adds	r3, #7
 800677e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	4a1f      	ldr	r2, [pc, #124]	@ (800680c <prvHeapInit+0xac>)
 8006790:	4413      	add	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <prvHeapInit+0xb0>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800679e:	4b1c      	ldr	r3, [pc, #112]	@ (8006810 <prvHeapInit+0xb0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4413      	add	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067ac:	2208      	movs	r2, #8
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <prvHeapInit+0xb4>)
 80067c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067c2:	4b14      	ldr	r3, [pc, #80]	@ (8006814 <prvHeapInit+0xb4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ca:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <prvHeapInit+0xb4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <prvHeapInit+0xb4>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006818 <prvHeapInit+0xb8>)
 80067ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	4a09      	ldr	r2, [pc, #36]	@ (800681c <prvHeapInit+0xbc>)
 80067f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067f8:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <prvHeapInit+0xc0>)
 80067fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067fe:	601a      	str	r2, [r3, #0]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	200005f8 	.word	0x200005f8
 8006810:	200041f8 	.word	0x200041f8
 8006814:	20004200 	.word	0x20004200
 8006818:	20004208 	.word	0x20004208
 800681c:	20004204 	.word	0x20004204
 8006820:	20004214 	.word	0x20004214

08006824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800682c:	4b28      	ldr	r3, [pc, #160]	@ (80068d0 <prvInsertBlockIntoFreeList+0xac>)
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e002      	b.n	8006838 <prvInsertBlockIntoFreeList+0x14>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d8f7      	bhi.n	8006832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4413      	add	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d108      	bne.n	8006866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	441a      	add	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	441a      	add	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d118      	bne.n	80068ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b15      	ldr	r3, [pc, #84]	@ (80068d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d00d      	beq.n	80068a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	441a      	add	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e008      	b.n	80068b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068a2:	4b0c      	ldr	r3, [pc, #48]	@ (80068d4 <prvInsertBlockIntoFreeList+0xb0>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e003      	b.n	80068b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d002      	beq.n	80068c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	200041f8 	.word	0x200041f8
 80068d4:	20004200 	.word	0x20004200

080068d8 <memset>:
 80068d8:	4402      	add	r2, r0
 80068da:	4603      	mov	r3, r0
 80068dc:	4293      	cmp	r3, r2
 80068de:	d100      	bne.n	80068e2 <memset+0xa>
 80068e0:	4770      	bx	lr
 80068e2:	f803 1b01 	strb.w	r1, [r3], #1
 80068e6:	e7f9      	b.n	80068dc <memset+0x4>

080068e8 <_reclaim_reent>:
 80068e8:	4b29      	ldr	r3, [pc, #164]	@ (8006990 <_reclaim_reent+0xa8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4283      	cmp	r3, r0
 80068ee:	b570      	push	{r4, r5, r6, lr}
 80068f0:	4604      	mov	r4, r0
 80068f2:	d04b      	beq.n	800698c <_reclaim_reent+0xa4>
 80068f4:	69c3      	ldr	r3, [r0, #28]
 80068f6:	b1ab      	cbz	r3, 8006924 <_reclaim_reent+0x3c>
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	b16b      	cbz	r3, 8006918 <_reclaim_reent+0x30>
 80068fc:	2500      	movs	r5, #0
 80068fe:	69e3      	ldr	r3, [r4, #28]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	5959      	ldr	r1, [r3, r5]
 8006904:	2900      	cmp	r1, #0
 8006906:	d13b      	bne.n	8006980 <_reclaim_reent+0x98>
 8006908:	3504      	adds	r5, #4
 800690a:	2d80      	cmp	r5, #128	@ 0x80
 800690c:	d1f7      	bne.n	80068fe <_reclaim_reent+0x16>
 800690e:	69e3      	ldr	r3, [r4, #28]
 8006910:	4620      	mov	r0, r4
 8006912:	68d9      	ldr	r1, [r3, #12]
 8006914:	f000 f872 	bl	80069fc <_free_r>
 8006918:	69e3      	ldr	r3, [r4, #28]
 800691a:	6819      	ldr	r1, [r3, #0]
 800691c:	b111      	cbz	r1, 8006924 <_reclaim_reent+0x3c>
 800691e:	4620      	mov	r0, r4
 8006920:	f000 f86c 	bl	80069fc <_free_r>
 8006924:	6961      	ldr	r1, [r4, #20]
 8006926:	b111      	cbz	r1, 800692e <_reclaim_reent+0x46>
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f867 	bl	80069fc <_free_r>
 800692e:	69e1      	ldr	r1, [r4, #28]
 8006930:	b111      	cbz	r1, 8006938 <_reclaim_reent+0x50>
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f862 	bl	80069fc <_free_r>
 8006938:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800693a:	b111      	cbz	r1, 8006942 <_reclaim_reent+0x5a>
 800693c:	4620      	mov	r0, r4
 800693e:	f000 f85d 	bl	80069fc <_free_r>
 8006942:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006944:	b111      	cbz	r1, 800694c <_reclaim_reent+0x64>
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f858 	bl	80069fc <_free_r>
 800694c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800694e:	b111      	cbz	r1, 8006956 <_reclaim_reent+0x6e>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f853 	bl	80069fc <_free_r>
 8006956:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006958:	b111      	cbz	r1, 8006960 <_reclaim_reent+0x78>
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f84e 	bl	80069fc <_free_r>
 8006960:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006962:	b111      	cbz	r1, 800696a <_reclaim_reent+0x82>
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f849 	bl	80069fc <_free_r>
 800696a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800696c:	b111      	cbz	r1, 8006974 <_reclaim_reent+0x8c>
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f844 	bl	80069fc <_free_r>
 8006974:	6a23      	ldr	r3, [r4, #32]
 8006976:	b14b      	cbz	r3, 800698c <_reclaim_reent+0xa4>
 8006978:	4620      	mov	r0, r4
 800697a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800697e:	4718      	bx	r3
 8006980:	680e      	ldr	r6, [r1, #0]
 8006982:	4620      	mov	r0, r4
 8006984:	f000 f83a 	bl	80069fc <_free_r>
 8006988:	4631      	mov	r1, r6
 800698a:	e7bb      	b.n	8006904 <_reclaim_reent+0x1c>
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	bf00      	nop
 8006990:	20000018 	.word	0x20000018

08006994 <__libc_init_array>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4d0d      	ldr	r5, [pc, #52]	@ (80069cc <__libc_init_array+0x38>)
 8006998:	4c0d      	ldr	r4, [pc, #52]	@ (80069d0 <__libc_init_array+0x3c>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	2600      	movs	r6, #0
 80069a0:	42a6      	cmp	r6, r4
 80069a2:	d109      	bne.n	80069b8 <__libc_init_array+0x24>
 80069a4:	4d0b      	ldr	r5, [pc, #44]	@ (80069d4 <__libc_init_array+0x40>)
 80069a6:	4c0c      	ldr	r4, [pc, #48]	@ (80069d8 <__libc_init_array+0x44>)
 80069a8:	f000 f87e 	bl	8006aa8 <_init>
 80069ac:	1b64      	subs	r4, r4, r5
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	2600      	movs	r6, #0
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	d105      	bne.n	80069c2 <__libc_init_array+0x2e>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069bc:	4798      	blx	r3
 80069be:	3601      	adds	r6, #1
 80069c0:	e7ee      	b.n	80069a0 <__libc_init_array+0xc>
 80069c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c6:	4798      	blx	r3
 80069c8:	3601      	adds	r6, #1
 80069ca:	e7f2      	b.n	80069b2 <__libc_init_array+0x1e>
 80069cc:	08007364 	.word	0x08007364
 80069d0:	08007364 	.word	0x08007364
 80069d4:	08007364 	.word	0x08007364
 80069d8:	08007368 	.word	0x08007368

080069dc <__retarget_lock_acquire_recursive>:
 80069dc:	4770      	bx	lr

080069de <__retarget_lock_release_recursive>:
 80069de:	4770      	bx	lr

080069e0 <memcpy>:
 80069e0:	440a      	add	r2, r1
 80069e2:	4291      	cmp	r1, r2
 80069e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e8:	d100      	bne.n	80069ec <memcpy+0xc>
 80069ea:	4770      	bx	lr
 80069ec:	b510      	push	{r4, lr}
 80069ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f6:	4291      	cmp	r1, r2
 80069f8:	d1f9      	bne.n	80069ee <memcpy+0xe>
 80069fa:	bd10      	pop	{r4, pc}

080069fc <_free_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d041      	beq.n	8006a88 <_free_r+0x8c>
 8006a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a08:	1f0c      	subs	r4, r1, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfb8      	it	lt
 8006a0e:	18e4      	addlt	r4, r4, r3
 8006a10:	f000 f83e 	bl	8006a90 <__malloc_lock>
 8006a14:	4a1d      	ldr	r2, [pc, #116]	@ (8006a8c <_free_r+0x90>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	b933      	cbnz	r3, 8006a28 <_free_r+0x2c>
 8006a1a:	6063      	str	r3, [r4, #4]
 8006a1c:	6014      	str	r4, [r2, #0]
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a24:	f000 b83a 	b.w	8006a9c <__malloc_unlock>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d908      	bls.n	8006a3e <_free_r+0x42>
 8006a2c:	6820      	ldr	r0, [r4, #0]
 8006a2e:	1821      	adds	r1, r4, r0
 8006a30:	428b      	cmp	r3, r1
 8006a32:	bf01      	itttt	eq
 8006a34:	6819      	ldreq	r1, [r3, #0]
 8006a36:	685b      	ldreq	r3, [r3, #4]
 8006a38:	1809      	addeq	r1, r1, r0
 8006a3a:	6021      	streq	r1, [r4, #0]
 8006a3c:	e7ed      	b.n	8006a1a <_free_r+0x1e>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b10b      	cbz	r3, 8006a48 <_free_r+0x4c>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d9fa      	bls.n	8006a3e <_free_r+0x42>
 8006a48:	6811      	ldr	r1, [r2, #0]
 8006a4a:	1850      	adds	r0, r2, r1
 8006a4c:	42a0      	cmp	r0, r4
 8006a4e:	d10b      	bne.n	8006a68 <_free_r+0x6c>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	4401      	add	r1, r0
 8006a54:	1850      	adds	r0, r2, r1
 8006a56:	4283      	cmp	r3, r0
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	d1e0      	bne.n	8006a1e <_free_r+0x22>
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	6053      	str	r3, [r2, #4]
 8006a62:	4408      	add	r0, r1
 8006a64:	6010      	str	r0, [r2, #0]
 8006a66:	e7da      	b.n	8006a1e <_free_r+0x22>
 8006a68:	d902      	bls.n	8006a70 <_free_r+0x74>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	e7d6      	b.n	8006a1e <_free_r+0x22>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	1821      	adds	r1, r4, r0
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf04      	itt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	bf04      	itt	eq
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6054      	str	r4, [r2, #4]
 8006a86:	e7ca      	b.n	8006a1e <_free_r+0x22>
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20004354 	.word	0x20004354

08006a90 <__malloc_lock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	@ (8006a98 <__malloc_lock+0x8>)
 8006a92:	f7ff bfa3 	b.w	80069dc <__retarget_lock_acquire_recursive>
 8006a96:	bf00      	nop
 8006a98:	20004350 	.word	0x20004350

08006a9c <__malloc_unlock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	@ (8006aa4 <__malloc_unlock+0x8>)
 8006a9e:	f7ff bf9e 	b.w	80069de <__retarget_lock_release_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20004350 	.word	0x20004350

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
